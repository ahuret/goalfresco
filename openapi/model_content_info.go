/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ContentInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentInfo{}

// ContentInfo struct for ContentInfo
type ContentInfo struct {
	MimeType string `json:"mimeType"`
	MimeTypeName *string `json:"mimeTypeName,omitempty"`
	SizeInBytes *int64 `json:"sizeInBytes,omitempty"`
	Encoding *string `json:"encoding,omitempty"`
}

// NewContentInfo instantiates a new ContentInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentInfo(mimeType string) *ContentInfo {
	this := ContentInfo{}
	this.MimeType = mimeType
	return &this
}

// NewContentInfoWithDefaults instantiates a new ContentInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentInfoWithDefaults() *ContentInfo {
	this := ContentInfo{}
	return &this
}

// GetMimeType returns the MimeType field value
func (o *ContentInfo) GetMimeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value
// and a boolean to check if the value has been set.
func (o *ContentInfo) GetMimeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MimeType, true
}

// SetMimeType sets field value
func (o *ContentInfo) SetMimeType(v string) {
	o.MimeType = v
}

// GetMimeTypeName returns the MimeTypeName field value if set, zero value otherwise.
func (o *ContentInfo) GetMimeTypeName() string {
	if o == nil || IsNil(o.MimeTypeName) {
		var ret string
		return ret
	}
	return *o.MimeTypeName
}

// GetMimeTypeNameOk returns a tuple with the MimeTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentInfo) GetMimeTypeNameOk() (*string, bool) {
	if o == nil || IsNil(o.MimeTypeName) {
		return nil, false
	}
	return o.MimeTypeName, true
}

// HasMimeTypeName returns a boolean if a field has been set.
func (o *ContentInfo) HasMimeTypeName() bool {
	if o != nil && !IsNil(o.MimeTypeName) {
		return true
	}

	return false
}

// SetMimeTypeName gets a reference to the given string and assigns it to the MimeTypeName field.
func (o *ContentInfo) SetMimeTypeName(v string) {
	o.MimeTypeName = &v
}

// GetSizeInBytes returns the SizeInBytes field value if set, zero value otherwise.
func (o *ContentInfo) GetSizeInBytes() int64 {
	if o == nil || IsNil(o.SizeInBytes) {
		var ret int64
		return ret
	}
	return *o.SizeInBytes
}

// GetSizeInBytesOk returns a tuple with the SizeInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentInfo) GetSizeInBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.SizeInBytes) {
		return nil, false
	}
	return o.SizeInBytes, true
}

// HasSizeInBytes returns a boolean if a field has been set.
func (o *ContentInfo) HasSizeInBytes() bool {
	if o != nil && !IsNil(o.SizeInBytes) {
		return true
	}

	return false
}

// SetSizeInBytes gets a reference to the given int64 and assigns it to the SizeInBytes field.
func (o *ContentInfo) SetSizeInBytes(v int64) {
	o.SizeInBytes = &v
}

// GetEncoding returns the Encoding field value if set, zero value otherwise.
func (o *ContentInfo) GetEncoding() string {
	if o == nil || IsNil(o.Encoding) {
		var ret string
		return ret
	}
	return *o.Encoding
}

// GetEncodingOk returns a tuple with the Encoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentInfo) GetEncodingOk() (*string, bool) {
	if o == nil || IsNil(o.Encoding) {
		return nil, false
	}
	return o.Encoding, true
}

// HasEncoding returns a boolean if a field has been set.
func (o *ContentInfo) HasEncoding() bool {
	if o != nil && !IsNil(o.Encoding) {
		return true
	}

	return false
}

// SetEncoding gets a reference to the given string and assigns it to the Encoding field.
func (o *ContentInfo) SetEncoding(v string) {
	o.Encoding = &v
}

func (o ContentInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mimeType"] = o.MimeType
	if !IsNil(o.MimeTypeName) {
		toSerialize["mimeTypeName"] = o.MimeTypeName
	}
	if !IsNil(o.SizeInBytes) {
		toSerialize["sizeInBytes"] = o.SizeInBytes
	}
	if !IsNil(o.Encoding) {
		toSerialize["encoding"] = o.Encoding
	}
	return toSerialize, nil
}

type NullableContentInfo struct {
	value *ContentInfo
	isSet bool
}

func (v NullableContentInfo) Get() *ContentInfo {
	return v.value
}

func (v *NullableContentInfo) Set(val *ContentInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableContentInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableContentInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentInfo(val *ContentInfo) *NullableContentInfo {
	return &NullableContentInfo{value: val, isSet: true}
}

func (v NullableContentInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


