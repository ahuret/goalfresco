/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AuditAppEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditAppEntry{}

// AuditAppEntry struct for AuditAppEntry
type AuditAppEntry struct {
	Entry *AuditApp `json:"entry,omitempty"`
}

// NewAuditAppEntry instantiates a new AuditAppEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditAppEntry() *AuditAppEntry {
	this := AuditAppEntry{}
	return &this
}

// NewAuditAppEntryWithDefaults instantiates a new AuditAppEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditAppEntryWithDefaults() *AuditAppEntry {
	this := AuditAppEntry{}
	return &this
}

// GetEntry returns the Entry field value if set, zero value otherwise.
func (o *AuditAppEntry) GetEntry() AuditApp {
	if o == nil || IsNil(o.Entry) {
		var ret AuditApp
		return ret
	}
	return *o.Entry
}

// GetEntryOk returns a tuple with the Entry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditAppEntry) GetEntryOk() (*AuditApp, bool) {
	if o == nil || IsNil(o.Entry) {
		return nil, false
	}
	return o.Entry, true
}

// HasEntry returns a boolean if a field has been set.
func (o *AuditAppEntry) HasEntry() bool {
	if o != nil && !IsNil(o.Entry) {
		return true
	}

	return false
}

// SetEntry gets a reference to the given AuditApp and assigns it to the Entry field.
func (o *AuditAppEntry) SetEntry(v AuditApp) {
	o.Entry = &v
}

func (o AuditAppEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditAppEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Entry) {
		toSerialize["entry"] = o.Entry
	}
	return toSerialize, nil
}

type NullableAuditAppEntry struct {
	value *AuditAppEntry
	isSet bool
}

func (v NullableAuditAppEntry) Get() *AuditAppEntry {
	return v.value
}

func (v *NullableAuditAppEntry) Set(val *AuditAppEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditAppEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditAppEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditAppEntry(val *AuditAppEntry) *NullableAuditAppEntry {
	return &NullableAuditAppEntry{value: val, isSet: true}
}

func (v NullableAuditAppEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditAppEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


