/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ActionBodyExec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionBodyExec{}

// ActionBodyExec struct for ActionBodyExec
type ActionBodyExec struct {
	ActionDefinitionId string `json:"actionDefinitionId"`
	// The entity upon which to execute the action, typically a node ID or similar.
	TargetId *string `json:"targetId,omitempty"`
	Params map[string]interface{} `json:"params,omitempty"`
}

// NewActionBodyExec instantiates a new ActionBodyExec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionBodyExec(actionDefinitionId string) *ActionBodyExec {
	this := ActionBodyExec{}
	this.ActionDefinitionId = actionDefinitionId
	return &this
}

// NewActionBodyExecWithDefaults instantiates a new ActionBodyExec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionBodyExecWithDefaults() *ActionBodyExec {
	this := ActionBodyExec{}
	return &this
}

// GetActionDefinitionId returns the ActionDefinitionId field value
func (o *ActionBodyExec) GetActionDefinitionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActionDefinitionId
}

// GetActionDefinitionIdOk returns a tuple with the ActionDefinitionId field value
// and a boolean to check if the value has been set.
func (o *ActionBodyExec) GetActionDefinitionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionDefinitionId, true
}

// SetActionDefinitionId sets field value
func (o *ActionBodyExec) SetActionDefinitionId(v string) {
	o.ActionDefinitionId = v
}

// GetTargetId returns the TargetId field value if set, zero value otherwise.
func (o *ActionBodyExec) GetTargetId() string {
	if o == nil || IsNil(o.TargetId) {
		var ret string
		return ret
	}
	return *o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionBodyExec) GetTargetIdOk() (*string, bool) {
	if o == nil || IsNil(o.TargetId) {
		return nil, false
	}
	return o.TargetId, true
}

// HasTargetId returns a boolean if a field has been set.
func (o *ActionBodyExec) HasTargetId() bool {
	if o != nil && !IsNil(o.TargetId) {
		return true
	}

	return false
}

// SetTargetId gets a reference to the given string and assigns it to the TargetId field.
func (o *ActionBodyExec) SetTargetId(v string) {
	o.TargetId = &v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *ActionBodyExec) GetParams() map[string]interface{} {
	if o == nil || IsNil(o.Params) {
		var ret map[string]interface{}
		return ret
	}
	return o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionBodyExec) GetParamsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Params) {
		return map[string]interface{}{}, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *ActionBodyExec) HasParams() bool {
	if o != nil && !IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given map[string]interface{} and assigns it to the Params field.
func (o *ActionBodyExec) SetParams(v map[string]interface{}) {
	o.Params = v
}

func (o ActionBodyExec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionBodyExec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["actionDefinitionId"] = o.ActionDefinitionId
	if !IsNil(o.TargetId) {
		toSerialize["targetId"] = o.TargetId
	}
	if !IsNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	return toSerialize, nil
}

type NullableActionBodyExec struct {
	value *ActionBodyExec
	isSet bool
}

func (v NullableActionBodyExec) Get() *ActionBodyExec {
	return v.value
}

func (v *NullableActionBodyExec) Set(val *ActionBodyExec) {
	v.value = val
	v.isSet = true
}

func (v NullableActionBodyExec) IsSet() bool {
	return v.isSet
}

func (v *NullableActionBodyExec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionBodyExec(val *ActionBodyExec) *NullableActionBodyExec {
	return &NullableActionBodyExec{value: val, isSet: true}
}

func (v NullableActionBodyExec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionBodyExec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


