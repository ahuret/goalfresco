/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ActionDefinitionList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionDefinitionList{}

// ActionDefinitionList struct for ActionDefinitionList
type ActionDefinitionList struct {
	List *ActionDefinitionListList `json:"list,omitempty"`
}

// NewActionDefinitionList instantiates a new ActionDefinitionList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionDefinitionList() *ActionDefinitionList {
	this := ActionDefinitionList{}
	return &this
}

// NewActionDefinitionListWithDefaults instantiates a new ActionDefinitionList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionDefinitionListWithDefaults() *ActionDefinitionList {
	this := ActionDefinitionList{}
	return &this
}

// GetList returns the List field value if set, zero value otherwise.
func (o *ActionDefinitionList) GetList() ActionDefinitionListList {
	if o == nil || IsNil(o.List) {
		var ret ActionDefinitionListList
		return ret
	}
	return *o.List
}

// GetListOk returns a tuple with the List field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionDefinitionList) GetListOk() (*ActionDefinitionListList, bool) {
	if o == nil || IsNil(o.List) {
		return nil, false
	}
	return o.List, true
}

// HasList returns a boolean if a field has been set.
func (o *ActionDefinitionList) HasList() bool {
	if o != nil && !IsNil(o.List) {
		return true
	}

	return false
}

// SetList gets a reference to the given ActionDefinitionListList and assigns it to the List field.
func (o *ActionDefinitionList) SetList(v ActionDefinitionListList) {
	o.List = &v
}

func (o ActionDefinitionList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionDefinitionList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.List) {
		toSerialize["list"] = o.List
	}
	return toSerialize, nil
}

type NullableActionDefinitionList struct {
	value *ActionDefinitionList
	isSet bool
}

func (v NullableActionDefinitionList) Get() *ActionDefinitionList {
	return v.value
}

func (v *NullableActionDefinitionList) Set(val *ActionDefinitionList) {
	v.value = val
	v.isSet = true
}

func (v NullableActionDefinitionList) IsSet() bool {
	return v.isSet
}

func (v *NullableActionDefinitionList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionDefinitionList(val *ActionDefinitionList) *NullableActionDefinitionList {
	return &NullableActionDefinitionList{value: val, isSet: true}
}

func (v NullableActionDefinitionList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionDefinitionList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


