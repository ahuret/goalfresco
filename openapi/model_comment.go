/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"github.com/ahuret/goalfresco/time"
)

// checks if the Comment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Comment{}

// Comment struct for Comment
type Comment struct {
	Id string `json:"id"`
	Title string `json:"title"`
	Content string `json:"content"`
	CreatedBy Person `json:"createdBy"`
	CreatedAt time.Time `json:"createdAt"`
	Edited bool `json:"edited"`
	ModifiedBy Person `json:"modifiedBy"`
	ModifiedAt time.Time `json:"modifiedAt"`
	CanEdit bool `json:"canEdit"`
	CanDelete bool `json:"canDelete"`
}

// NewComment instantiates a new Comment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComment(id string, title string, content string, createdBy Person, createdAt time.Time, edited bool, modifiedBy Person, modifiedAt time.Time, canEdit bool, canDelete bool) *Comment {
	this := Comment{}
	this.Id = id
	this.Title = title
	this.Content = content
	this.CreatedBy = createdBy
	this.CreatedAt = createdAt
	this.Edited = edited
	this.ModifiedBy = modifiedBy
	this.ModifiedAt = modifiedAt
	this.CanEdit = canEdit
	this.CanDelete = canDelete
	return &this
}

// NewCommentWithDefaults instantiates a new Comment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentWithDefaults() *Comment {
	this := Comment{}
	return &this
}

// GetId returns the Id field value
func (o *Comment) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Comment) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Comment) SetId(v string) {
	o.Id = v
}

// GetTitle returns the Title field value
func (o *Comment) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Comment) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Comment) SetTitle(v string) {
	o.Title = v
}

// GetContent returns the Content field value
func (o *Comment) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *Comment) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *Comment) SetContent(v string) {
	o.Content = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *Comment) GetCreatedBy() Person {
	if o == nil {
		var ret Person
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *Comment) GetCreatedByOk() (*Person, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *Comment) SetCreatedBy(v Person) {
	o.CreatedBy = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Comment) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Comment) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Comment) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetEdited returns the Edited field value
func (o *Comment) GetEdited() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Edited
}

// GetEditedOk returns a tuple with the Edited field value
// and a boolean to check if the value has been set.
func (o *Comment) GetEditedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Edited, true
}

// SetEdited sets field value
func (o *Comment) SetEdited(v bool) {
	o.Edited = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *Comment) GetModifiedBy() Person {
	if o == nil {
		var ret Person
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *Comment) GetModifiedByOk() (*Person, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *Comment) SetModifiedBy(v Person) {
	o.ModifiedBy = v
}

// GetModifiedAt returns the ModifiedAt field value
func (o *Comment) GetModifiedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value
// and a boolean to check if the value has been set.
func (o *Comment) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedAt, true
}

// SetModifiedAt sets field value
func (o *Comment) SetModifiedAt(v time.Time) {
	o.ModifiedAt = v
}

// GetCanEdit returns the CanEdit field value
func (o *Comment) GetCanEdit() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CanEdit
}

// GetCanEditOk returns a tuple with the CanEdit field value
// and a boolean to check if the value has been set.
func (o *Comment) GetCanEditOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanEdit, true
}

// SetCanEdit sets field value
func (o *Comment) SetCanEdit(v bool) {
	o.CanEdit = v
}

// GetCanDelete returns the CanDelete field value
func (o *Comment) GetCanDelete() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CanDelete
}

// GetCanDeleteOk returns a tuple with the CanDelete field value
// and a boolean to check if the value has been set.
func (o *Comment) GetCanDeleteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanDelete, true
}

// SetCanDelete sets field value
func (o *Comment) SetCanDelete(v bool) {
	o.CanDelete = v
}

func (o Comment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Comment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["title"] = o.Title
	toSerialize["content"] = o.Content
	toSerialize["createdBy"] = o.CreatedBy
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["edited"] = o.Edited
	toSerialize["modifiedBy"] = o.ModifiedBy
	toSerialize["modifiedAt"] = o.ModifiedAt
	toSerialize["canEdit"] = o.CanEdit
	toSerialize["canDelete"] = o.CanDelete
	return toSerialize, nil
}

type NullableComment struct {
	value *Comment
	isSet bool
}

func (v NullableComment) Get() *Comment {
	return v.value
}

func (v *NullableComment) Set(val *Comment) {
	v.value = val
	v.isSet = true
}

func (v NullableComment) IsSet() bool {
	return v.isSet
}

func (v *NullableComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComment(val *Comment) *NullableComment {
	return &NullableComment{value: val, isSet: true}
}

func (v NullableComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


