/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NodeAssociationPaging type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeAssociationPaging{}

// NodeAssociationPaging struct for NodeAssociationPaging
type NodeAssociationPaging struct {
	List *NodeAssociationPagingList `json:"list,omitempty"`
}

// NewNodeAssociationPaging instantiates a new NodeAssociationPaging object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeAssociationPaging() *NodeAssociationPaging {
	this := NodeAssociationPaging{}
	return &this
}

// NewNodeAssociationPagingWithDefaults instantiates a new NodeAssociationPaging object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeAssociationPagingWithDefaults() *NodeAssociationPaging {
	this := NodeAssociationPaging{}
	return &this
}

// GetList returns the List field value if set, zero value otherwise.
func (o *NodeAssociationPaging) GetList() NodeAssociationPagingList {
	if o == nil || IsNil(o.List) {
		var ret NodeAssociationPagingList
		return ret
	}
	return *o.List
}

// GetListOk returns a tuple with the List field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeAssociationPaging) GetListOk() (*NodeAssociationPagingList, bool) {
	if o == nil || IsNil(o.List) {
		return nil, false
	}
	return o.List, true
}

// HasList returns a boolean if a field has been set.
func (o *NodeAssociationPaging) HasList() bool {
	if o != nil && !IsNil(o.List) {
		return true
	}

	return false
}

// SetList gets a reference to the given NodeAssociationPagingList and assigns it to the List field.
func (o *NodeAssociationPaging) SetList(v NodeAssociationPagingList) {
	o.List = &v
}

func (o NodeAssociationPaging) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeAssociationPaging) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.List) {
		toSerialize["list"] = o.List
	}
	return toSerialize, nil
}

type NullableNodeAssociationPaging struct {
	value *NodeAssociationPaging
	isSet bool
}

func (v NullableNodeAssociationPaging) Get() *NodeAssociationPaging {
	return v.value
}

func (v *NullableNodeAssociationPaging) Set(val *NodeAssociationPaging) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeAssociationPaging) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeAssociationPaging) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeAssociationPaging(val *NodeAssociationPaging) *NullableNodeAssociationPaging {
	return &NullableNodeAssociationPaging{value: val, isSet: true}
}

func (v NullableNodeAssociationPaging) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeAssociationPaging) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


