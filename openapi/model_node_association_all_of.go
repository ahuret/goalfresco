/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NodeAssociationAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeAssociationAllOf{}

// NodeAssociationAllOf struct for NodeAssociationAllOf
type NodeAssociationAllOf struct {
	Association *AssociationInfo `json:"association,omitempty"`
}

// NewNodeAssociationAllOf instantiates a new NodeAssociationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeAssociationAllOf() *NodeAssociationAllOf {
	this := NodeAssociationAllOf{}
	return &this
}

// NewNodeAssociationAllOfWithDefaults instantiates a new NodeAssociationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeAssociationAllOfWithDefaults() *NodeAssociationAllOf {
	this := NodeAssociationAllOf{}
	return &this
}

// GetAssociation returns the Association field value if set, zero value otherwise.
func (o *NodeAssociationAllOf) GetAssociation() AssociationInfo {
	if o == nil || IsNil(o.Association) {
		var ret AssociationInfo
		return ret
	}
	return *o.Association
}

// GetAssociationOk returns a tuple with the Association field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeAssociationAllOf) GetAssociationOk() (*AssociationInfo, bool) {
	if o == nil || IsNil(o.Association) {
		return nil, false
	}
	return o.Association, true
}

// HasAssociation returns a boolean if a field has been set.
func (o *NodeAssociationAllOf) HasAssociation() bool {
	if o != nil && !IsNil(o.Association) {
		return true
	}

	return false
}

// SetAssociation gets a reference to the given AssociationInfo and assigns it to the Association field.
func (o *NodeAssociationAllOf) SetAssociation(v AssociationInfo) {
	o.Association = &v
}

func (o NodeAssociationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeAssociationAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Association) {
		toSerialize["association"] = o.Association
	}
	return toSerialize, nil
}

type NullableNodeAssociationAllOf struct {
	value *NodeAssociationAllOf
	isSet bool
}

func (v NullableNodeAssociationAllOf) Get() *NodeAssociationAllOf {
	return v.value
}

func (v *NullableNodeAssociationAllOf) Set(val *NodeAssociationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeAssociationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeAssociationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeAssociationAllOf(val *NodeAssociationAllOf) *NullableNodeAssociationAllOf {
	return &NullableNodeAssociationAllOf{value: val, isSet: true}
}

func (v NullableNodeAssociationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeAssociationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


