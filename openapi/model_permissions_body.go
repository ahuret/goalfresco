/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PermissionsBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionsBody{}

// PermissionsBody struct for PermissionsBody
type PermissionsBody struct {
	IsInheritanceEnabled *bool `json:"isInheritanceEnabled,omitempty"`
	LocallySet []PermissionElement `json:"locallySet,omitempty"`
}

// NewPermissionsBody instantiates a new PermissionsBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionsBody() *PermissionsBody {
	this := PermissionsBody{}
	return &this
}

// NewPermissionsBodyWithDefaults instantiates a new PermissionsBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionsBodyWithDefaults() *PermissionsBody {
	this := PermissionsBody{}
	return &this
}

// GetIsInheritanceEnabled returns the IsInheritanceEnabled field value if set, zero value otherwise.
func (o *PermissionsBody) GetIsInheritanceEnabled() bool {
	if o == nil || IsNil(o.IsInheritanceEnabled) {
		var ret bool
		return ret
	}
	return *o.IsInheritanceEnabled
}

// GetIsInheritanceEnabledOk returns a tuple with the IsInheritanceEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionsBody) GetIsInheritanceEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsInheritanceEnabled) {
		return nil, false
	}
	return o.IsInheritanceEnabled, true
}

// HasIsInheritanceEnabled returns a boolean if a field has been set.
func (o *PermissionsBody) HasIsInheritanceEnabled() bool {
	if o != nil && !IsNil(o.IsInheritanceEnabled) {
		return true
	}

	return false
}

// SetIsInheritanceEnabled gets a reference to the given bool and assigns it to the IsInheritanceEnabled field.
func (o *PermissionsBody) SetIsInheritanceEnabled(v bool) {
	o.IsInheritanceEnabled = &v
}

// GetLocallySet returns the LocallySet field value if set, zero value otherwise.
func (o *PermissionsBody) GetLocallySet() []PermissionElement {
	if o == nil || IsNil(o.LocallySet) {
		var ret []PermissionElement
		return ret
	}
	return o.LocallySet
}

// GetLocallySetOk returns a tuple with the LocallySet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionsBody) GetLocallySetOk() ([]PermissionElement, bool) {
	if o == nil || IsNil(o.LocallySet) {
		return nil, false
	}
	return o.LocallySet, true
}

// HasLocallySet returns a boolean if a field has been set.
func (o *PermissionsBody) HasLocallySet() bool {
	if o != nil && !IsNil(o.LocallySet) {
		return true
	}

	return false
}

// SetLocallySet gets a reference to the given []PermissionElement and assigns it to the LocallySet field.
func (o *PermissionsBody) SetLocallySet(v []PermissionElement) {
	o.LocallySet = v
}

func (o PermissionsBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionsBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsInheritanceEnabled) {
		toSerialize["isInheritanceEnabled"] = o.IsInheritanceEnabled
	}
	if !IsNil(o.LocallySet) {
		toSerialize["locallySet"] = o.LocallySet
	}
	return toSerialize, nil
}

type NullablePermissionsBody struct {
	value *PermissionsBody
	isSet bool
}

func (v NullablePermissionsBody) Get() *PermissionsBody {
	return v.value
}

func (v *NullablePermissionsBody) Set(val *PermissionsBody) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionsBody) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionsBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionsBody(val *PermissionsBody) *NullablePermissionsBody {
	return &NullablePermissionsBody{value: val, isSet: true}
}

func (v NullablePermissionsBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionsBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


