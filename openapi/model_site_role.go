/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SiteRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteRole{}

// SiteRole struct for SiteRole
type SiteRole struct {
	Site Site `json:"site"`
	Id string `json:"id"`
	Guid string `json:"guid"`
	Role string `json:"role"`
}

// NewSiteRole instantiates a new SiteRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteRole(site Site, id string, guid string, role string) *SiteRole {
	this := SiteRole{}
	this.Site = site
	this.Id = id
	this.Guid = guid
	this.Role = role
	return &this
}

// NewSiteRoleWithDefaults instantiates a new SiteRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteRoleWithDefaults() *SiteRole {
	this := SiteRole{}
	return &this
}

// GetSite returns the Site field value
func (o *SiteRole) GetSite() Site {
	if o == nil {
		var ret Site
		return ret
	}

	return o.Site
}

// GetSiteOk returns a tuple with the Site field value
// and a boolean to check if the value has been set.
func (o *SiteRole) GetSiteOk() (*Site, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Site, true
}

// SetSite sets field value
func (o *SiteRole) SetSite(v Site) {
	o.Site = v
}

// GetId returns the Id field value
func (o *SiteRole) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SiteRole) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SiteRole) SetId(v string) {
	o.Id = v
}

// GetGuid returns the Guid field value
func (o *SiteRole) GetGuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Guid
}

// GetGuidOk returns a tuple with the Guid field value
// and a boolean to check if the value has been set.
func (o *SiteRole) GetGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Guid, true
}

// SetGuid sets field value
func (o *SiteRole) SetGuid(v string) {
	o.Guid = v
}

// GetRole returns the Role field value
func (o *SiteRole) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *SiteRole) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *SiteRole) SetRole(v string) {
	o.Role = v
}

func (o SiteRole) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["site"] = o.Site
	toSerialize["id"] = o.Id
	toSerialize["guid"] = o.Guid
	toSerialize["role"] = o.Role
	return toSerialize, nil
}

type NullableSiteRole struct {
	value *SiteRole
	isSet bool
}

func (v NullableSiteRole) Get() *SiteRole {
	return v.value
}

func (v *NullableSiteRole) Set(val *SiteRole) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteRole) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteRole(val *SiteRole) *NullableSiteRole {
	return &NullableSiteRole{value: val, isSet: true}
}

func (v NullableSiteRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


