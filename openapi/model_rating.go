/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"github.com/ahuret/goalfresco/time"
)

// checks if the Rating type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Rating{}

// Rating A person can rate an item of content by liking it. They can also remove their like of an item of content. API methods exist to get a list of ratings and to add a new rating. 
type Rating struct {
	Id string `json:"id"`
	Aggregate RatingAggregate `json:"aggregate"`
	RatedAt *time.Time `json:"ratedAt,omitempty"`
	// The rating. The type is specific to the rating scheme, boolean for the likes and an integer for the fiveStar.
	MyRating *string `json:"myRating,omitempty"`
}

// NewRating instantiates a new Rating object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRating(id string, aggregate RatingAggregate) *Rating {
	this := Rating{}
	this.Id = id
	this.Aggregate = aggregate
	return &this
}

// NewRatingWithDefaults instantiates a new Rating object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatingWithDefaults() *Rating {
	this := Rating{}
	return &this
}

// GetId returns the Id field value
func (o *Rating) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Rating) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Rating) SetId(v string) {
	o.Id = v
}

// GetAggregate returns the Aggregate field value
func (o *Rating) GetAggregate() RatingAggregate {
	if o == nil {
		var ret RatingAggregate
		return ret
	}

	return o.Aggregate
}

// GetAggregateOk returns a tuple with the Aggregate field value
// and a boolean to check if the value has been set.
func (o *Rating) GetAggregateOk() (*RatingAggregate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Aggregate, true
}

// SetAggregate sets field value
func (o *Rating) SetAggregate(v RatingAggregate) {
	o.Aggregate = v
}

// GetRatedAt returns the RatedAt field value if set, zero value otherwise.
func (o *Rating) GetRatedAt() time.Time {
	if o == nil || IsNil(o.RatedAt) {
		var ret time.Time
		return ret
	}
	return *o.RatedAt
}

// GetRatedAtOk returns a tuple with the RatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rating) GetRatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RatedAt) {
		return nil, false
	}
	return o.RatedAt, true
}

// HasRatedAt returns a boolean if a field has been set.
func (o *Rating) HasRatedAt() bool {
	if o != nil && !IsNil(o.RatedAt) {
		return true
	}

	return false
}

// SetRatedAt gets a reference to the given time.Time and assigns it to the RatedAt field.
func (o *Rating) SetRatedAt(v time.Time) {
	o.RatedAt = &v
}

// GetMyRating returns the MyRating field value if set, zero value otherwise.
func (o *Rating) GetMyRating() string {
	if o == nil || IsNil(o.MyRating) {
		var ret string
		return ret
	}
	return *o.MyRating
}

// GetMyRatingOk returns a tuple with the MyRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rating) GetMyRatingOk() (*string, bool) {
	if o == nil || IsNil(o.MyRating) {
		return nil, false
	}
	return o.MyRating, true
}

// HasMyRating returns a boolean if a field has been set.
func (o *Rating) HasMyRating() bool {
	if o != nil && !IsNil(o.MyRating) {
		return true
	}

	return false
}

// SetMyRating gets a reference to the given string and assigns it to the MyRating field.
func (o *Rating) SetMyRating(v string) {
	o.MyRating = &v
}

func (o Rating) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Rating) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["aggregate"] = o.Aggregate
	if !IsNil(o.RatedAt) {
		toSerialize["ratedAt"] = o.RatedAt
	}
	if !IsNil(o.MyRating) {
		toSerialize["myRating"] = o.MyRating
	}
	return toSerialize, nil
}

type NullableRating struct {
	value *Rating
	isSet bool
}

func (v NullableRating) Get() *Rating {
	return v.value
}

func (v *NullableRating) Set(val *Rating) {
	v.value = val
	v.isSet = true
}

func (v NullableRating) IsSet() bool {
	return v.isSet
}

func (v *NullableRating) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRating(val *Rating) *NullableRating {
	return &NullableRating{value: val, isSet: true}
}

func (v NullableRating) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRating) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


