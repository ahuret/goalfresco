/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AuditAppPaging type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditAppPaging{}

// AuditAppPaging struct for AuditAppPaging
type AuditAppPaging struct {
	List *AuditAppPagingList `json:"list,omitempty"`
}

// NewAuditAppPaging instantiates a new AuditAppPaging object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditAppPaging() *AuditAppPaging {
	this := AuditAppPaging{}
	return &this
}

// NewAuditAppPagingWithDefaults instantiates a new AuditAppPaging object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditAppPagingWithDefaults() *AuditAppPaging {
	this := AuditAppPaging{}
	return &this
}

// GetList returns the List field value if set, zero value otherwise.
func (o *AuditAppPaging) GetList() AuditAppPagingList {
	if o == nil || IsNil(o.List) {
		var ret AuditAppPagingList
		return ret
	}
	return *o.List
}

// GetListOk returns a tuple with the List field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditAppPaging) GetListOk() (*AuditAppPagingList, bool) {
	if o == nil || IsNil(o.List) {
		return nil, false
	}
	return o.List, true
}

// HasList returns a boolean if a field has been set.
func (o *AuditAppPaging) HasList() bool {
	if o != nil && !IsNil(o.List) {
		return true
	}

	return false
}

// SetList gets a reference to the given AuditAppPagingList and assigns it to the List field.
func (o *AuditAppPaging) SetList(v AuditAppPagingList) {
	o.List = &v
}

func (o AuditAppPaging) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditAppPaging) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.List) {
		toSerialize["list"] = o.List
	}
	return toSerialize, nil
}

type NullableAuditAppPaging struct {
	value *AuditAppPaging
	isSet bool
}

func (v NullableAuditAppPaging) Get() *AuditAppPaging {
	return v.value
}

func (v *NullableAuditAppPaging) Set(val *AuditAppPaging) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditAppPaging) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditAppPaging) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditAppPaging(val *AuditAppPaging) *NullableAuditAppPaging {
	return &NullableAuditAppPaging{value: val, isSet: true}
}

func (v NullableAuditAppPaging) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditAppPaging) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


