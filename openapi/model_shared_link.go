/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"github.com/ahuret/goalfresco/time"
)

// checks if the SharedLink type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharedLink{}

// SharedLink struct for SharedLink
type SharedLink struct {
	Id *string `json:"id,omitempty"`
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
	NodeId *string `json:"nodeId,omitempty"`
	// The name must not contain spaces or the following special characters: * \" < > \\ / ? : and |. The character . must not be used at the end of the name. 
	Name *string `json:"name,omitempty"`
	Title *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	ModifiedAt *time.Time `json:"modifiedAt,omitempty"`
	ModifiedByUser *UserInfo `json:"modifiedByUser,omitempty"`
	SharedByUser *UserInfo `json:"sharedByUser,omitempty"`
	Content *ContentInfo `json:"content,omitempty"`
	// The allowable operations for the Quickshare link itself. See allowableOperationsOnTarget for the allowable operations pertaining to the linked content node. 
	AllowableOperations []string `json:"allowableOperations,omitempty"`
	// The allowable operations for the content node being shared. 
	AllowableOperationsOnTarget []string `json:"allowableOperationsOnTarget,omitempty"`
	IsFavorite *bool `json:"isFavorite,omitempty"`
	// A subset of the target node's properties, system properties and properties already available in the SharedLink are excluded. 
	Properties map[string]interface{} `json:"properties,omitempty"`
	AspectNames []string `json:"aspectNames,omitempty"`
	Path *PathInfo `json:"path,omitempty"`
}

// NewSharedLink instantiates a new SharedLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedLink() *SharedLink {
	this := SharedLink{}
	return &this
}

// NewSharedLinkWithDefaults instantiates a new SharedLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedLinkWithDefaults() *SharedLink {
	this := SharedLink{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SharedLink) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedLink) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SharedLink) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SharedLink) SetId(v string) {
	o.Id = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *SharedLink) GetExpiresAt() time.Time {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedLink) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *SharedLink) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *SharedLink) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *SharedLink) GetNodeId() string {
	if o == nil || IsNil(o.NodeId) {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedLink) GetNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *SharedLink) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *SharedLink) SetNodeId(v string) {
	o.NodeId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SharedLink) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedLink) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SharedLink) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SharedLink) SetName(v string) {
	o.Name = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *SharedLink) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedLink) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *SharedLink) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *SharedLink) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SharedLink) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedLink) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SharedLink) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SharedLink) SetDescription(v string) {
	o.Description = &v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *SharedLink) GetModifiedAt() time.Time {
	if o == nil || IsNil(o.ModifiedAt) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedLink) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ModifiedAt) {
		return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *SharedLink) HasModifiedAt() bool {
	if o != nil && !IsNil(o.ModifiedAt) {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given time.Time and assigns it to the ModifiedAt field.
func (o *SharedLink) SetModifiedAt(v time.Time) {
	o.ModifiedAt = &v
}

// GetModifiedByUser returns the ModifiedByUser field value if set, zero value otherwise.
func (o *SharedLink) GetModifiedByUser() UserInfo {
	if o == nil || IsNil(o.ModifiedByUser) {
		var ret UserInfo
		return ret
	}
	return *o.ModifiedByUser
}

// GetModifiedByUserOk returns a tuple with the ModifiedByUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedLink) GetModifiedByUserOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.ModifiedByUser) {
		return nil, false
	}
	return o.ModifiedByUser, true
}

// HasModifiedByUser returns a boolean if a field has been set.
func (o *SharedLink) HasModifiedByUser() bool {
	if o != nil && !IsNil(o.ModifiedByUser) {
		return true
	}

	return false
}

// SetModifiedByUser gets a reference to the given UserInfo and assigns it to the ModifiedByUser field.
func (o *SharedLink) SetModifiedByUser(v UserInfo) {
	o.ModifiedByUser = &v
}

// GetSharedByUser returns the SharedByUser field value if set, zero value otherwise.
func (o *SharedLink) GetSharedByUser() UserInfo {
	if o == nil || IsNil(o.SharedByUser) {
		var ret UserInfo
		return ret
	}
	return *o.SharedByUser
}

// GetSharedByUserOk returns a tuple with the SharedByUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedLink) GetSharedByUserOk() (*UserInfo, bool) {
	if o == nil || IsNil(o.SharedByUser) {
		return nil, false
	}
	return o.SharedByUser, true
}

// HasSharedByUser returns a boolean if a field has been set.
func (o *SharedLink) HasSharedByUser() bool {
	if o != nil && !IsNil(o.SharedByUser) {
		return true
	}

	return false
}

// SetSharedByUser gets a reference to the given UserInfo and assigns it to the SharedByUser field.
func (o *SharedLink) SetSharedByUser(v UserInfo) {
	o.SharedByUser = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *SharedLink) GetContent() ContentInfo {
	if o == nil || IsNil(o.Content) {
		var ret ContentInfo
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedLink) GetContentOk() (*ContentInfo, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *SharedLink) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given ContentInfo and assigns it to the Content field.
func (o *SharedLink) SetContent(v ContentInfo) {
	o.Content = &v
}

// GetAllowableOperations returns the AllowableOperations field value if set, zero value otherwise.
func (o *SharedLink) GetAllowableOperations() []string {
	if o == nil || IsNil(o.AllowableOperations) {
		var ret []string
		return ret
	}
	return o.AllowableOperations
}

// GetAllowableOperationsOk returns a tuple with the AllowableOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedLink) GetAllowableOperationsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowableOperations) {
		return nil, false
	}
	return o.AllowableOperations, true
}

// HasAllowableOperations returns a boolean if a field has been set.
func (o *SharedLink) HasAllowableOperations() bool {
	if o != nil && !IsNil(o.AllowableOperations) {
		return true
	}

	return false
}

// SetAllowableOperations gets a reference to the given []string and assigns it to the AllowableOperations field.
func (o *SharedLink) SetAllowableOperations(v []string) {
	o.AllowableOperations = v
}

// GetAllowableOperationsOnTarget returns the AllowableOperationsOnTarget field value if set, zero value otherwise.
func (o *SharedLink) GetAllowableOperationsOnTarget() []string {
	if o == nil || IsNil(o.AllowableOperationsOnTarget) {
		var ret []string
		return ret
	}
	return o.AllowableOperationsOnTarget
}

// GetAllowableOperationsOnTargetOk returns a tuple with the AllowableOperationsOnTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedLink) GetAllowableOperationsOnTargetOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowableOperationsOnTarget) {
		return nil, false
	}
	return o.AllowableOperationsOnTarget, true
}

// HasAllowableOperationsOnTarget returns a boolean if a field has been set.
func (o *SharedLink) HasAllowableOperationsOnTarget() bool {
	if o != nil && !IsNil(o.AllowableOperationsOnTarget) {
		return true
	}

	return false
}

// SetAllowableOperationsOnTarget gets a reference to the given []string and assigns it to the AllowableOperationsOnTarget field.
func (o *SharedLink) SetAllowableOperationsOnTarget(v []string) {
	o.AllowableOperationsOnTarget = v
}

// GetIsFavorite returns the IsFavorite field value if set, zero value otherwise.
func (o *SharedLink) GetIsFavorite() bool {
	if o == nil || IsNil(o.IsFavorite) {
		var ret bool
		return ret
	}
	return *o.IsFavorite
}

// GetIsFavoriteOk returns a tuple with the IsFavorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedLink) GetIsFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFavorite) {
		return nil, false
	}
	return o.IsFavorite, true
}

// HasIsFavorite returns a boolean if a field has been set.
func (o *SharedLink) HasIsFavorite() bool {
	if o != nil && !IsNil(o.IsFavorite) {
		return true
	}

	return false
}

// SetIsFavorite gets a reference to the given bool and assigns it to the IsFavorite field.
func (o *SharedLink) SetIsFavorite(v bool) {
	o.IsFavorite = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *SharedLink) GetProperties() map[string]interface{} {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedLink) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *SharedLink) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]interface{} and assigns it to the Properties field.
func (o *SharedLink) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

// GetAspectNames returns the AspectNames field value if set, zero value otherwise.
func (o *SharedLink) GetAspectNames() []string {
	if o == nil || IsNil(o.AspectNames) {
		var ret []string
		return ret
	}
	return o.AspectNames
}

// GetAspectNamesOk returns a tuple with the AspectNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedLink) GetAspectNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.AspectNames) {
		return nil, false
	}
	return o.AspectNames, true
}

// HasAspectNames returns a boolean if a field has been set.
func (o *SharedLink) HasAspectNames() bool {
	if o != nil && !IsNil(o.AspectNames) {
		return true
	}

	return false
}

// SetAspectNames gets a reference to the given []string and assigns it to the AspectNames field.
func (o *SharedLink) SetAspectNames(v []string) {
	o.AspectNames = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *SharedLink) GetPath() PathInfo {
	if o == nil || IsNil(o.Path) {
		var ret PathInfo
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedLink) GetPathOk() (*PathInfo, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *SharedLink) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given PathInfo and assigns it to the Path field.
func (o *SharedLink) SetPath(v PathInfo) {
	o.Path = &v
}

func (o SharedLink) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharedLink) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expiresAt"] = o.ExpiresAt
	}
	if !IsNil(o.NodeId) {
		toSerialize["nodeId"] = o.NodeId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ModifiedAt) {
		toSerialize["modifiedAt"] = o.ModifiedAt
	}
	if !IsNil(o.ModifiedByUser) {
		toSerialize["modifiedByUser"] = o.ModifiedByUser
	}
	if !IsNil(o.SharedByUser) {
		toSerialize["sharedByUser"] = o.SharedByUser
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.AllowableOperations) {
		toSerialize["allowableOperations"] = o.AllowableOperations
	}
	if !IsNil(o.AllowableOperationsOnTarget) {
		toSerialize["allowableOperationsOnTarget"] = o.AllowableOperationsOnTarget
	}
	if !IsNil(o.IsFavorite) {
		toSerialize["isFavorite"] = o.IsFavorite
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.AspectNames) {
		toSerialize["aspectNames"] = o.AspectNames
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	return toSerialize, nil
}

type NullableSharedLink struct {
	value *SharedLink
	isSet bool
}

func (v NullableSharedLink) Get() *SharedLink {
	return v.value
}

func (v *NullableSharedLink) Set(val *SharedLink) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedLink) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedLink(val *SharedLink) *NullableSharedLink {
	return &NullableSharedLink{value: val, isSet: true}
}

func (v NullableSharedLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


