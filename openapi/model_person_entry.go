/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PersonEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PersonEntry{}

// PersonEntry struct for PersonEntry
type PersonEntry struct {
	Entry Person `json:"entry"`
}

// NewPersonEntry instantiates a new PersonEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersonEntry(entry Person) *PersonEntry {
	this := PersonEntry{}
	this.Entry = entry
	return &this
}

// NewPersonEntryWithDefaults instantiates a new PersonEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersonEntryWithDefaults() *PersonEntry {
	this := PersonEntry{}
	return &this
}

// GetEntry returns the Entry field value
func (o *PersonEntry) GetEntry() Person {
	if o == nil {
		var ret Person
		return ret
	}

	return o.Entry
}

// GetEntryOk returns a tuple with the Entry field value
// and a boolean to check if the value has been set.
func (o *PersonEntry) GetEntryOk() (*Person, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entry, true
}

// SetEntry sets field value
func (o *PersonEntry) SetEntry(v Person) {
	o.Entry = v
}

func (o PersonEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PersonEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entry"] = o.Entry
	return toSerialize, nil
}

type NullablePersonEntry struct {
	value *PersonEntry
	isSet bool
}

func (v NullablePersonEntry) Get() *PersonEntry {
	return v.value
}

func (v *NullablePersonEntry) Set(val *PersonEntry) {
	v.value = val
	v.isSet = true
}

func (v NullablePersonEntry) IsSet() bool {
	return v.isSet
}

func (v *NullablePersonEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersonEntry(val *PersonEntry) *NullablePersonEntry {
	return &NullablePersonEntry{value: val, isSet: true}
}

func (v NullablePersonEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersonEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


