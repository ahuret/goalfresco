/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"github.com/ahuret/goalfresco/time"
)

// checks if the DeletedNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeletedNode{}

// DeletedNode struct for DeletedNode
type DeletedNode struct {
	Id string `json:"id"`
	// The name must not contain spaces or the following special characters: * \" < > \\ / ? : and |. The character . must not be used at the end of the name. 
	Name string `json:"name"`
	NodeType string `json:"nodeType"`
	IsFolder bool `json:"isFolder"`
	IsFile bool `json:"isFile"`
	IsLocked *bool `json:"isLocked,omitempty"`
	ModifiedAt time.Time `json:"modifiedAt"`
	ModifiedByUser UserInfo `json:"modifiedByUser"`
	CreatedAt time.Time `json:"createdAt"`
	CreatedByUser UserInfo `json:"createdByUser"`
	ParentId *string `json:"parentId,omitempty"`
	IsLink *bool `json:"isLink,omitempty"`
	IsFavorite *bool `json:"isFavorite,omitempty"`
	Content *ContentInfo `json:"content,omitempty"`
	AspectNames []string `json:"aspectNames,omitempty"`
	Properties map[string]interface{} `json:"properties,omitempty"`
	AllowableOperations []string `json:"allowableOperations,omitempty"`
	Path *PathInfo `json:"path,omitempty"`
	Permissions *PermissionsInfo `json:"permissions,omitempty"`
	Definition *Definition `json:"definition,omitempty"`
	ArchivedByUser UserInfo `json:"archivedByUser"`
	ArchivedAt time.Time `json:"archivedAt"`
}

// NewDeletedNode instantiates a new DeletedNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeletedNode(id string, name string, nodeType string, isFolder bool, isFile bool, modifiedAt time.Time, modifiedByUser UserInfo, createdAt time.Time, createdByUser UserInfo, archivedByUser UserInfo, archivedAt time.Time) *DeletedNode {
	this := DeletedNode{}
	this.Id = id
	this.Name = name
	this.NodeType = nodeType
	this.IsFolder = isFolder
	this.IsFile = isFile
	var isLocked bool = false
	this.IsLocked = &isLocked
	this.ModifiedAt = modifiedAt
	this.ModifiedByUser = modifiedByUser
	this.CreatedAt = createdAt
	this.CreatedByUser = createdByUser
	this.ArchivedByUser = archivedByUser
	this.ArchivedAt = archivedAt
	return &this
}

// NewDeletedNodeWithDefaults instantiates a new DeletedNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeletedNodeWithDefaults() *DeletedNode {
	this := DeletedNode{}
	var isLocked bool = false
	this.IsLocked = &isLocked
	return &this
}

// GetId returns the Id field value
func (o *DeletedNode) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DeletedNode) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *DeletedNode) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DeletedNode) SetName(v string) {
	o.Name = v
}

// GetNodeType returns the NodeType field value
func (o *DeletedNode) GetNodeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeType
}

// GetNodeTypeOk returns a tuple with the NodeType field value
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetNodeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeType, true
}

// SetNodeType sets field value
func (o *DeletedNode) SetNodeType(v string) {
	o.NodeType = v
}

// GetIsFolder returns the IsFolder field value
func (o *DeletedNode) GetIsFolder() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsFolder
}

// GetIsFolderOk returns a tuple with the IsFolder field value
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetIsFolderOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsFolder, true
}

// SetIsFolder sets field value
func (o *DeletedNode) SetIsFolder(v bool) {
	o.IsFolder = v
}

// GetIsFile returns the IsFile field value
func (o *DeletedNode) GetIsFile() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsFile
}

// GetIsFileOk returns a tuple with the IsFile field value
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetIsFileOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsFile, true
}

// SetIsFile sets field value
func (o *DeletedNode) SetIsFile(v bool) {
	o.IsFile = v
}

// GetIsLocked returns the IsLocked field value if set, zero value otherwise.
func (o *DeletedNode) GetIsLocked() bool {
	if o == nil || IsNil(o.IsLocked) {
		var ret bool
		return ret
	}
	return *o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetIsLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLocked) {
		return nil, false
	}
	return o.IsLocked, true
}

// HasIsLocked returns a boolean if a field has been set.
func (o *DeletedNode) HasIsLocked() bool {
	if o != nil && !IsNil(o.IsLocked) {
		return true
	}

	return false
}

// SetIsLocked gets a reference to the given bool and assigns it to the IsLocked field.
func (o *DeletedNode) SetIsLocked(v bool) {
	o.IsLocked = &v
}

// GetModifiedAt returns the ModifiedAt field value
func (o *DeletedNode) GetModifiedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedAt, true
}

// SetModifiedAt sets field value
func (o *DeletedNode) SetModifiedAt(v time.Time) {
	o.ModifiedAt = v
}

// GetModifiedByUser returns the ModifiedByUser field value
func (o *DeletedNode) GetModifiedByUser() UserInfo {
	if o == nil {
		var ret UserInfo
		return ret
	}

	return o.ModifiedByUser
}

// GetModifiedByUserOk returns a tuple with the ModifiedByUser field value
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetModifiedByUserOk() (*UserInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedByUser, true
}

// SetModifiedByUser sets field value
func (o *DeletedNode) SetModifiedByUser(v UserInfo) {
	o.ModifiedByUser = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *DeletedNode) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *DeletedNode) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedByUser returns the CreatedByUser field value
func (o *DeletedNode) GetCreatedByUser() UserInfo {
	if o == nil {
		var ret UserInfo
		return ret
	}

	return o.CreatedByUser
}

// GetCreatedByUserOk returns a tuple with the CreatedByUser field value
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetCreatedByUserOk() (*UserInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedByUser, true
}

// SetCreatedByUser sets field value
func (o *DeletedNode) SetCreatedByUser(v UserInfo) {
	o.CreatedByUser = v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *DeletedNode) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *DeletedNode) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *DeletedNode) SetParentId(v string) {
	o.ParentId = &v
}

// GetIsLink returns the IsLink field value if set, zero value otherwise.
func (o *DeletedNode) GetIsLink() bool {
	if o == nil || IsNil(o.IsLink) {
		var ret bool
		return ret
	}
	return *o.IsLink
}

// GetIsLinkOk returns a tuple with the IsLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetIsLinkOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLink) {
		return nil, false
	}
	return o.IsLink, true
}

// HasIsLink returns a boolean if a field has been set.
func (o *DeletedNode) HasIsLink() bool {
	if o != nil && !IsNil(o.IsLink) {
		return true
	}

	return false
}

// SetIsLink gets a reference to the given bool and assigns it to the IsLink field.
func (o *DeletedNode) SetIsLink(v bool) {
	o.IsLink = &v
}

// GetIsFavorite returns the IsFavorite field value if set, zero value otherwise.
func (o *DeletedNode) GetIsFavorite() bool {
	if o == nil || IsNil(o.IsFavorite) {
		var ret bool
		return ret
	}
	return *o.IsFavorite
}

// GetIsFavoriteOk returns a tuple with the IsFavorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetIsFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFavorite) {
		return nil, false
	}
	return o.IsFavorite, true
}

// HasIsFavorite returns a boolean if a field has been set.
func (o *DeletedNode) HasIsFavorite() bool {
	if o != nil && !IsNil(o.IsFavorite) {
		return true
	}

	return false
}

// SetIsFavorite gets a reference to the given bool and assigns it to the IsFavorite field.
func (o *DeletedNode) SetIsFavorite(v bool) {
	o.IsFavorite = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *DeletedNode) GetContent() ContentInfo {
	if o == nil || IsNil(o.Content) {
		var ret ContentInfo
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetContentOk() (*ContentInfo, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *DeletedNode) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given ContentInfo and assigns it to the Content field.
func (o *DeletedNode) SetContent(v ContentInfo) {
	o.Content = &v
}

// GetAspectNames returns the AspectNames field value if set, zero value otherwise.
func (o *DeletedNode) GetAspectNames() []string {
	if o == nil || IsNil(o.AspectNames) {
		var ret []string
		return ret
	}
	return o.AspectNames
}

// GetAspectNamesOk returns a tuple with the AspectNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetAspectNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.AspectNames) {
		return nil, false
	}
	return o.AspectNames, true
}

// HasAspectNames returns a boolean if a field has been set.
func (o *DeletedNode) HasAspectNames() bool {
	if o != nil && !IsNil(o.AspectNames) {
		return true
	}

	return false
}

// SetAspectNames gets a reference to the given []string and assigns it to the AspectNames field.
func (o *DeletedNode) SetAspectNames(v []string) {
	o.AspectNames = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *DeletedNode) GetProperties() map[string]interface{} {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *DeletedNode) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]interface{} and assigns it to the Properties field.
func (o *DeletedNode) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

// GetAllowableOperations returns the AllowableOperations field value if set, zero value otherwise.
func (o *DeletedNode) GetAllowableOperations() []string {
	if o == nil || IsNil(o.AllowableOperations) {
		var ret []string
		return ret
	}
	return o.AllowableOperations
}

// GetAllowableOperationsOk returns a tuple with the AllowableOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetAllowableOperationsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowableOperations) {
		return nil, false
	}
	return o.AllowableOperations, true
}

// HasAllowableOperations returns a boolean if a field has been set.
func (o *DeletedNode) HasAllowableOperations() bool {
	if o != nil && !IsNil(o.AllowableOperations) {
		return true
	}

	return false
}

// SetAllowableOperations gets a reference to the given []string and assigns it to the AllowableOperations field.
func (o *DeletedNode) SetAllowableOperations(v []string) {
	o.AllowableOperations = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *DeletedNode) GetPath() PathInfo {
	if o == nil || IsNil(o.Path) {
		var ret PathInfo
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetPathOk() (*PathInfo, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *DeletedNode) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given PathInfo and assigns it to the Path field.
func (o *DeletedNode) SetPath(v PathInfo) {
	o.Path = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *DeletedNode) GetPermissions() PermissionsInfo {
	if o == nil || IsNil(o.Permissions) {
		var ret PermissionsInfo
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetPermissionsOk() (*PermissionsInfo, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *DeletedNode) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given PermissionsInfo and assigns it to the Permissions field.
func (o *DeletedNode) SetPermissions(v PermissionsInfo) {
	o.Permissions = &v
}

// GetDefinition returns the Definition field value if set, zero value otherwise.
func (o *DeletedNode) GetDefinition() Definition {
	if o == nil || IsNil(o.Definition) {
		var ret Definition
		return ret
	}
	return *o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetDefinitionOk() (*Definition, bool) {
	if o == nil || IsNil(o.Definition) {
		return nil, false
	}
	return o.Definition, true
}

// HasDefinition returns a boolean if a field has been set.
func (o *DeletedNode) HasDefinition() bool {
	if o != nil && !IsNil(o.Definition) {
		return true
	}

	return false
}

// SetDefinition gets a reference to the given Definition and assigns it to the Definition field.
func (o *DeletedNode) SetDefinition(v Definition) {
	o.Definition = &v
}

// GetArchivedByUser returns the ArchivedByUser field value
func (o *DeletedNode) GetArchivedByUser() UserInfo {
	if o == nil {
		var ret UserInfo
		return ret
	}

	return o.ArchivedByUser
}

// GetArchivedByUserOk returns a tuple with the ArchivedByUser field value
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetArchivedByUserOk() (*UserInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArchivedByUser, true
}

// SetArchivedByUser sets field value
func (o *DeletedNode) SetArchivedByUser(v UserInfo) {
	o.ArchivedByUser = v
}

// GetArchivedAt returns the ArchivedAt field value
func (o *DeletedNode) GetArchivedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ArchivedAt
}

// GetArchivedAtOk returns a tuple with the ArchivedAt field value
// and a boolean to check if the value has been set.
func (o *DeletedNode) GetArchivedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArchivedAt, true
}

// SetArchivedAt sets field value
func (o *DeletedNode) SetArchivedAt(v time.Time) {
	o.ArchivedAt = v
}

func (o DeletedNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeletedNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["nodeType"] = o.NodeType
	toSerialize["isFolder"] = o.IsFolder
	toSerialize["isFile"] = o.IsFile
	if !IsNil(o.IsLocked) {
		toSerialize["isLocked"] = o.IsLocked
	}
	toSerialize["modifiedAt"] = o.ModifiedAt
	toSerialize["modifiedByUser"] = o.ModifiedByUser
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["createdByUser"] = o.CreatedByUser
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	if !IsNil(o.IsLink) {
		toSerialize["isLink"] = o.IsLink
	}
	if !IsNil(o.IsFavorite) {
		toSerialize["isFavorite"] = o.IsFavorite
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.AspectNames) {
		toSerialize["aspectNames"] = o.AspectNames
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.AllowableOperations) {
		toSerialize["allowableOperations"] = o.AllowableOperations
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.Definition) {
		toSerialize["definition"] = o.Definition
	}
	toSerialize["archivedByUser"] = o.ArchivedByUser
	toSerialize["archivedAt"] = o.ArchivedAt
	return toSerialize, nil
}

type NullableDeletedNode struct {
	value *DeletedNode
	isSet bool
}

func (v NullableDeletedNode) Get() *DeletedNode {
	return v.value
}

func (v *NullableDeletedNode) Set(val *DeletedNode) {
	v.value = val
	v.isSet = true
}

func (v NullableDeletedNode) IsSet() bool {
	return v.isSet
}

func (v *NullableDeletedNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeletedNode(val *DeletedNode) *NullableDeletedNode {
	return &NullableDeletedNode{value: val, isSet: true}
}

func (v NullableDeletedNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeletedNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


