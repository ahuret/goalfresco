/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Group type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Group{}

// Group struct for Group
type Group struct {
	Id string `json:"id"`
	DisplayName string `json:"displayName"`
	IsRoot bool `json:"isRoot"`
	ParentIds []string `json:"parentIds,omitempty"`
	Zones []string `json:"zones,omitempty"`
}

// NewGroup instantiates a new Group object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroup(id string, displayName string, isRoot bool) *Group {
	this := Group{}
	this.Id = id
	this.DisplayName = displayName
	this.IsRoot = isRoot
	return &this
}

// NewGroupWithDefaults instantiates a new Group object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupWithDefaults() *Group {
	this := Group{}
	var isRoot bool = true
	this.IsRoot = isRoot
	return &this
}

// GetId returns the Id field value
func (o *Group) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Group) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Group) SetId(v string) {
	o.Id = v
}

// GetDisplayName returns the DisplayName field value
func (o *Group) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *Group) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *Group) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetIsRoot returns the IsRoot field value
func (o *Group) GetIsRoot() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsRoot
}

// GetIsRootOk returns a tuple with the IsRoot field value
// and a boolean to check if the value has been set.
func (o *Group) GetIsRootOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsRoot, true
}

// SetIsRoot sets field value
func (o *Group) SetIsRoot(v bool) {
	o.IsRoot = v
}

// GetParentIds returns the ParentIds field value if set, zero value otherwise.
func (o *Group) GetParentIds() []string {
	if o == nil || IsNil(o.ParentIds) {
		var ret []string
		return ret
	}
	return o.ParentIds
}

// GetParentIdsOk returns a tuple with the ParentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetParentIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ParentIds) {
		return nil, false
	}
	return o.ParentIds, true
}

// HasParentIds returns a boolean if a field has been set.
func (o *Group) HasParentIds() bool {
	if o != nil && !IsNil(o.ParentIds) {
		return true
	}

	return false
}

// SetParentIds gets a reference to the given []string and assigns it to the ParentIds field.
func (o *Group) SetParentIds(v []string) {
	o.ParentIds = v
}

// GetZones returns the Zones field value if set, zero value otherwise.
func (o *Group) GetZones() []string {
	if o == nil || IsNil(o.Zones) {
		var ret []string
		return ret
	}
	return o.Zones
}

// GetZonesOk returns a tuple with the Zones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetZonesOk() ([]string, bool) {
	if o == nil || IsNil(o.Zones) {
		return nil, false
	}
	return o.Zones, true
}

// HasZones returns a boolean if a field has been set.
func (o *Group) HasZones() bool {
	if o != nil && !IsNil(o.Zones) {
		return true
	}

	return false
}

// SetZones gets a reference to the given []string and assigns it to the Zones field.
func (o *Group) SetZones(v []string) {
	o.Zones = v
}

func (o Group) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Group) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["displayName"] = o.DisplayName
	toSerialize["isRoot"] = o.IsRoot
	if !IsNil(o.ParentIds) {
		toSerialize["parentIds"] = o.ParentIds
	}
	if !IsNil(o.Zones) {
		toSerialize["zones"] = o.Zones
	}
	return toSerialize, nil
}

type NullableGroup struct {
	value *Group
	isSet bool
}

func (v NullableGroup) Get() *Group {
	return v.value
}

func (v *NullableGroup) Set(val *Group) {
	v.value = val
	v.isSet = true
}

func (v NullableGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroup(val *Group) *NullableGroup {
	return &NullableGroup{value: val, isSet: true}
}

func (v NullableGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


