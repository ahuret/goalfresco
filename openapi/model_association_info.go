/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AssociationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssociationInfo{}

// AssociationInfo struct for AssociationInfo
type AssociationInfo struct {
	AssocType string `json:"assocType"`
}

// NewAssociationInfo instantiates a new AssociationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssociationInfo(assocType string) *AssociationInfo {
	this := AssociationInfo{}
	this.AssocType = assocType
	return &this
}

// NewAssociationInfoWithDefaults instantiates a new AssociationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssociationInfoWithDefaults() *AssociationInfo {
	this := AssociationInfo{}
	return &this
}

// GetAssocType returns the AssocType field value
func (o *AssociationInfo) GetAssocType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssocType
}

// GetAssocTypeOk returns a tuple with the AssocType field value
// and a boolean to check if the value has been set.
func (o *AssociationInfo) GetAssocTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssocType, true
}

// SetAssocType sets field value
func (o *AssociationInfo) SetAssocType(v string) {
	o.AssocType = v
}

func (o AssociationInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssociationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assocType"] = o.AssocType
	return toSerialize, nil
}

type NullableAssociationInfo struct {
	value *AssociationInfo
	isSet bool
}

func (v NullableAssociationInfo) Get() *AssociationInfo {
	return v.value
}

func (v *NullableAssociationInfo) Set(val *AssociationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAssociationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAssociationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssociationInfo(val *AssociationInfo) *NullableAssociationInfo {
	return &NullableAssociationInfo{value: val, isSet: true}
}

func (v NullableAssociationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssociationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


