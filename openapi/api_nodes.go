/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
	"github.com/ahuret/goalfresco/time"
)


// NodesApiService NodesApi service
type NodesApiService service

type ApiCopyNodeRequest struct {
	ctx context.Context
	ApiService *NodesApiService
	nodeId string
	nodeBodyCopy *NodeBodyCopy
	include *[]string
	fields *[]string
}

// The targetParentId and, optionally, a new name which should include the fileÃ‚ extension.
func (r ApiCopyNodeRequest) NodeBodyCopy(nodeBodyCopy NodeBodyCopy) ApiCopyNodeRequest {
	r.nodeBodyCopy = &nodeBodyCopy
	return r
}

// Returns additional information about the node. The following optional fields can be requested: * allowableOperations * association * isLink * isFavorite * isLocked * path * permissions * definition 
func (r ApiCopyNodeRequest) Include(include []string) ApiCopyNodeRequest {
	r.include = &include
	return r
}

// A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
func (r ApiCopyNodeRequest) Fields(fields []string) ApiCopyNodeRequest {
	r.fields = &fields
	return r
}

func (r ApiCopyNodeRequest) Execute() (*NodeEntry, *http.Response, error) {
	return r.ApiService.CopyNodeExecute(r)
}

/*
CopyNode Copy a node

**Note:** this endpoint is available in Alfresco 5.2 and newer versions.

Copies the node **nodeId** to the parent folder node **targetParentId**. You specify the **targetParentId** in the request body.

The new node has the same name as the source node unless you specify a new **name** in the request body.

If the source **nodeId** is a folder, then all of its children are also copied.

If the source **nodeId** is a file, it's properties, aspects and tags are copied, it's ratings, comments and locks are not.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nodeId The identifier of a node.
 @return ApiCopyNodeRequest
*/
func (a *NodesApiService) CopyNode(ctx context.Context, nodeId string) ApiCopyNodeRequest {
	return ApiCopyNodeRequest{
		ApiService: a,
		ctx: ctx,
		nodeId: nodeId,
	}
}

// Execute executes the request
//  @return NodeEntry
func (a *NodesApiService) CopyNodeExecute(r ApiCopyNodeRequest) (*NodeEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NodeEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodesApiService.CopyNode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/nodes/{nodeId}/copy"
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", url.PathEscape(parameterValueToString(r.nodeId, "nodeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nodeBodyCopy == nil {
		return localVarReturnValue, nil, reportError("nodeBodyCopy is required and must be specified")
	}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nodeBodyCopy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateAssociationRequest struct {
	ctx context.Context
	ApiService *NodesApiService
	nodeId string
	associationBodyCreate *AssociationBody
	fields *[]string
}

// The target node id and assoc type.
func (r ApiCreateAssociationRequest) AssociationBodyCreate(associationBodyCreate AssociationBody) ApiCreateAssociationRequest {
	r.associationBodyCreate = &associationBodyCreate
	return r
}

// A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
func (r ApiCreateAssociationRequest) Fields(fields []string) ApiCreateAssociationRequest {
	r.fields = &fields
	return r
}

func (r ApiCreateAssociationRequest) Execute() (*AssociationEntry, *http.Response, error) {
	return r.ApiService.CreateAssociationExecute(r)
}

/*
CreateAssociation Create node association

**Note:** this endpoint is available in Alfresco 5.2 and newer versions.

Create an association, with the given association type, between the source **nodeId** and a target node.

**Note:** You can create more than one association by
specifying a list of associations in the JSON body like this:

```JSON
[
  {
     "targetId": "string",
     "assocType": "string"
  },
  {
    "targetId": "string",
    "assocType": "string"
  }
]
```
If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:

```JSON
{
  "list": {
    "pagination": {
      "count": 2,
      "hasMoreItems": false,
      "totalItems": 2,
      "skipCount": 0,
      "maxItems": 100
    },
    "entries": [
      {
        "entry": {
          ...
        }
      },
      {
        "entry": {
          ...
        }
      }
    ]
  }
}
```


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nodeId The identifier of a source node.
 @return ApiCreateAssociationRequest
*/
func (a *NodesApiService) CreateAssociation(ctx context.Context, nodeId string) ApiCreateAssociationRequest {
	return ApiCreateAssociationRequest{
		ApiService: a,
		ctx: ctx,
		nodeId: nodeId,
	}
}

// Execute executes the request
//  @return AssociationEntry
func (a *NodesApiService) CreateAssociationExecute(r ApiCreateAssociationRequest) (*AssociationEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AssociationEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodesApiService.CreateAssociation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/nodes/{nodeId}/targets"
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", url.PathEscape(parameterValueToString(r.nodeId, "nodeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.associationBodyCreate == nil {
		return localVarReturnValue, nil, reportError("associationBodyCreate is required and must be specified")
	}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.associationBodyCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateNodeRequest struct {
	ctx context.Context
	ApiService *NodesApiService
	nodeId string
	nodeBodyCreate *NodeBodyCreate
	autoRename *bool
	majorVersion *bool
	versioningEnabled *bool
	include *[]string
	fields *[]string
}

// The node information to create.
func (r ApiCreateNodeRequest) NodeBodyCreate(nodeBodyCreate NodeBodyCreate) ApiCreateNodeRequest {
	r.nodeBodyCreate = &nodeBodyCreate
	return r
}

// If true, then  a name clash will cause an attempt to auto rename by finding a unique name using an integer suffix.
func (r ApiCreateNodeRequest) AutoRename(autoRename bool) ApiCreateNodeRequest {
	r.autoRename = &autoRename
	return r
}

// If true, then created node will be version *1.0 MAJOR*. If false, then created node will be version *0.1 MINOR*.
func (r ApiCreateNodeRequest) MajorVersion(majorVersion bool) ApiCreateNodeRequest {
	r.majorVersion = &majorVersion
	return r
}

// If true, then created node will be versioned. If false, then created node will be unversioned and auto-versioning disabled.
func (r ApiCreateNodeRequest) VersioningEnabled(versioningEnabled bool) ApiCreateNodeRequest {
	r.versioningEnabled = &versioningEnabled
	return r
}

// Returns additional information about the node. The following optional fields can be requested: * allowableOperations * association * isLink * isFavorite * isLocked * path * permissions * definition 
func (r ApiCreateNodeRequest) Include(include []string) ApiCreateNodeRequest {
	r.include = &include
	return r
}

// A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
func (r ApiCreateNodeRequest) Fields(fields []string) ApiCreateNodeRequest {
	r.fields = &fields
	return r
}

func (r ApiCreateNodeRequest) Execute() (*NodeEntry, *http.Response, error) {
	return r.ApiService.CreateNodeExecute(r)
}

/*
CreateNode Create a node

**Note:** this endpoint is available in Alfresco 5.2 and newer versions.

Create a node and add it as a primary child of node **nodeId**.

This endpoint supports both JSON and multipart/form-data (file upload).

**Using multipart/form-data**

Use the **filedata** field to represent the content to upload, for example, the following curl command will
create a node with the contents of test.txt in the test user's home folder.

```curl -utest:test -X POST host:port/alfresco/api/-default-/public/alfresco/versions/1/nodes/-my-/children -F filedata=@test.txt```

You can use the **name** field to give an alternative name for the new file.

You can use the **nodeType** field to create a specific type. The default is cm:content.

You can use the **renditions** field to create renditions (e.g. doclib) asynchronously upon upload.
Also, as requesting rendition is a background process,
any rendition failure (e.g. No transformer is currently available) will not fail the whole upload and has the potential to silently fail.

Use **overwrite** to overwrite an existing file, matched by name. If the file is versionable,
the existing content is replaced.

When you overwrite existing content, you can set the **majorVersion** boolean field to **true** to indicate a major version
should be created. The default for **majorVersion** is **false**.
Setting  **majorVersion** enables versioning of the node, if it is not already versioned.

When you overwrite existing content, you can use the **comment** field to add a version comment that appears in the
version history. This also enables versioning of this node, if it is not already versioned.

You can set the **autoRename** boolean field to automatically resolve name clashes. If there is a name clash, then
the API method tries to create a unique name using an integer suffix.

You can use the **relativePath** field to specify the folder structure to create relative to the node **nodeId**.
Folders in the **relativePath** that do not exist are created before the node is created.

Any other field provided will be treated as a property to set on the newly created node.

**Note:** setting properties of type d:content and d:category are not supported.

**Note:** When creating a new node using multipart/form-data by default versioning is enabled and set to MAJOR Version.
Since Alfresco 6.2.3 **versioningEnabled** flag was introduced offering better control over the new node Versioning.

| **versioningEnabled** | **majorVersion** | **Version Type** |
|-----------------------|------------------|------------------|
|        unset          |        unset     |    MAJOR         |
|        unset          |        true      |    MAJOR         |
|        unset          |        false     |    MINOR         |
|        true           |        unset     |    MAJOR         |
|        true           |        true      |    MAJOR         |
|        true           |        false     |    MINOR         |
|        false          |        true      |    Unversioned   |
|        false          |        false     |    Unversioned   |
|        false          |        true      |    Unversioned   |
<br>

**Using JSON**

You must specify at least a **name** and **nodeType**. For example, to create a folder:
```JSON
{
  "name":"My Folder",
  "nodeType":"cm:folder"
}
```

You can create an empty file like this:
```JSON
{
  "name":"My text file.txt",
  "nodeType":"cm:content"
}
```
You can update binary content using the ```PUT /nodes/{nodeId}``` API method.

You can create a folder, or other node, inside a folder hierarchy:
```JSON
{
  "name":"My Special Folder",
  "nodeType":"cm:folder",
  "relativePath":"X/Y/Z"
}
```
The **relativePath** specifies the folder structure to create relative to the node **nodeId**. Folders in the
**relativePath** that do not exist are created before the node is created.

You can set properties when you create a new node:
```JSON
{
  "name":"My Other Folder",
  "nodeType":"cm:folder",
  "properties":
  {
    "cm:title":"Folder title",
    "cm:description":"This is an important folder"
  }
}
```

You can set multi-value properties when you create a new node which supports properties of type multiple.
 ```JSON
{
  "name":"My Other Folder",
  "nodeType":"custom:destination",
  "properties":
  {
    "cm:title":"Folder title",
    "cm:description":"This is an important folder",
    "custom:locations": [
                         "location X",
                         "location Y"
                        ]
  }
}
```

Any missing aspects are applied automatically. For example, **cm:titled** in the JSON shown above. You can set aspects
explicitly, if needed, using an **aspectNames** field.

**Note:** setting properties of type d:content and d:category are not supported.

You can also optionally disable (or enable) inherited permissions via *isInheritanceEnabled* flag:
```JSON
{
  "permissions":
    {
      "isInheritanceEnabled": false,
      "locallySet":
        [
          {"authorityId": "GROUP_special", "name": "Read", "accessStatus":"DENIED"},
          {"authorityId": "testuser", "name": "Contributor", "accessStatus":"ALLOWED"}
        ]
    }
}
```

Typically, for files and folders, the primary children are created within the parent folder using the default "cm:contains" assocType.
If the content model allows then it is also possible to create primary children with a different assoc type. For example:
```JSON
{
  "name":"My Node",
  "nodeType":"my:specialNodeType",
  "association":
  {
    "assocType":"my:specialAssocType"
  }
}
```

Additional associations can be added after creating a node. You can also add associations at the time the node is created. This is
required, for example, if the content model specifies that a node has mandatory associations to one or more existing nodes. You can optionally
specify an array of **secondaryChildren** to create one or more secondary child associations, such that the newly created node acts as a parent node.
You can optionally specify an array of **targets** to create one or more peer associations such that the newly created node acts as a source node.
For example, to associate one or more secondary children at time of creation:
```JSON
{
  "name":"My Folder",
  "nodeType":"cm:folder",
  "secondaryChildren":
    [ {"childId":"abcde-01234-...", "assocType":"my:specialChildAssocType"} ]
}
```
For example, to associate one or more targets at time of creation:
```JSON
{
  "name":"My Folder",
  "nodeType":"cm:folder",
  "targets":
    [ {"targetId":"abcde-01234-...", "assocType":"my:specialPeerAssocType"} ]
}
```

**Note:** You can create more than one child by
specifying a list of nodes in the JSON body. For example, the following JSON
body creates two folders inside the specified **nodeId**, if the **nodeId** identifies
a folder:

```JSON
[
  {
    "name":"My Folder 1",
    "nodeType":"cm:folder"
  },
  {
    "name":"My Folder 2",
    "nodeType":"cm:folder"
  }
]
```
If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:

```JSON
{
  "list": {
    "pagination": {
      "count": 2,
      "hasMoreItems": false,
      "totalItems": 2,
      "skipCount": 0,
      "maxItems": 100
    },
    "entries": [
      {
        "entry": {
          ...
        }
      },
      {
        "entry": {
          ...
        }
      }
    ]
  }
}
```
**Note:** When creating a new node using JSON by default versioning is disabled.
Since Alfresco 6.2.3 **versioningEnabled** flag was introduced offering better control over the new node Versioning.

| **versioningEnabled** | **majorVersion** | **Version Type** |
|-----------------------|------------------|------------------|
|        unset          |        unset     |    Unversioned   |
|        unset          |        true      |    MAJOR         |
|        unset          |        false     |    MINOR         |
|        true           |        unset     |    MAJOR         |
|        true           |        true      |    MAJOR         |
|        true           |        false     |    MINOR         |
|        false          |        true      |    Unversioned   |
|        false          |        false     |    Unversioned   |
|        false          |        true      |    Unversioned   |
<br>


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nodeId The identifier of a node. You can also use one of these well-known aliases: * -my- * -shared- * -root- 
 @return ApiCreateNodeRequest
*/
func (a *NodesApiService) CreateNode(ctx context.Context, nodeId string) ApiCreateNodeRequest {
	return ApiCreateNodeRequest{
		ApiService: a,
		ctx: ctx,
		nodeId: nodeId,
	}
}

// Execute executes the request
//  @return NodeEntry
func (a *NodesApiService) CreateNodeExecute(r ApiCreateNodeRequest) (*NodeEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NodeEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodesApiService.CreateNode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/nodes/{nodeId}/children"
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", url.PathEscape(parameterValueToString(r.nodeId, "nodeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nodeBodyCreate == nil {
		return localVarReturnValue, nil, reportError("nodeBodyCreate is required and must be specified")
	}

	if r.autoRename != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "autoRename", r.autoRename, "")
	}
	if r.majorVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "majorVersion", r.majorVersion, "")
	}
	if r.versioningEnabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "versioningEnabled", r.versioningEnabled, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nodeBodyCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateSecondaryChildAssociationRequest struct {
	ctx context.Context
	ApiService *NodesApiService
	nodeId string
	secondaryChildAssociationBodyCreate *ChildAssociationBody
	fields *[]string
}

// The child node id and assoc type.
func (r ApiCreateSecondaryChildAssociationRequest) SecondaryChildAssociationBodyCreate(secondaryChildAssociationBodyCreate ChildAssociationBody) ApiCreateSecondaryChildAssociationRequest {
	r.secondaryChildAssociationBodyCreate = &secondaryChildAssociationBodyCreate
	return r
}

// A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
func (r ApiCreateSecondaryChildAssociationRequest) Fields(fields []string) ApiCreateSecondaryChildAssociationRequest {
	r.fields = &fields
	return r
}

func (r ApiCreateSecondaryChildAssociationRequest) Execute() (*ChildAssociationEntry, *http.Response, error) {
	return r.ApiService.CreateSecondaryChildAssociationExecute(r)
}

/*
CreateSecondaryChildAssociation Create secondary child

**Note:** this endpoint is available in Alfresco 5.2 and newer versions.

Create a secondary child association, with the given association type, between the parent **nodeId** and a child node.

**Note:** You can create more than one secondary child association by
specifying a list of associations in the JSON body like this:

```JSON
[
  {
    "childId": "string",
    "assocType": "string"
  },
  {
    "childId": "string",
    "assocType": "string"
  }
]
```
If you specify a list as input, then a paginated list rather than an entry is returned in the response body. For example:

```JSON
{
  "list": {
    "pagination": {
      "count": 2,
      "hasMoreItems": false,
      "totalItems": 2,
      "skipCount": 0,
      "maxItems": 100
    },
    "entries": [
      {
        "entry": {
          ...
        }
      },
      {
        "entry": {
          ...
        }
      }
    ]
  }
}
```


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nodeId The identifier of a parent node.
 @return ApiCreateSecondaryChildAssociationRequest
*/
func (a *NodesApiService) CreateSecondaryChildAssociation(ctx context.Context, nodeId string) ApiCreateSecondaryChildAssociationRequest {
	return ApiCreateSecondaryChildAssociationRequest{
		ApiService: a,
		ctx: ctx,
		nodeId: nodeId,
	}
}

// Execute executes the request
//  @return ChildAssociationEntry
func (a *NodesApiService) CreateSecondaryChildAssociationExecute(r ApiCreateSecondaryChildAssociationRequest) (*ChildAssociationEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChildAssociationEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodesApiService.CreateSecondaryChildAssociation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/nodes/{nodeId}/secondary-children"
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", url.PathEscape(parameterValueToString(r.nodeId, "nodeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secondaryChildAssociationBodyCreate == nil {
		return localVarReturnValue, nil, reportError("secondaryChildAssociationBodyCreate is required and must be specified")
	}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secondaryChildAssociationBodyCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAssociationRequest struct {
	ctx context.Context
	ApiService *NodesApiService
	nodeId string
	targetId string
	assocType *string
}

// Only delete associations of this type.
func (r ApiDeleteAssociationRequest) AssocType(assocType string) ApiDeleteAssociationRequest {
	r.assocType = &assocType
	return r
}

func (r ApiDeleteAssociationRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAssociationExecute(r)
}

/*
DeleteAssociation Delete node association(s)

**Note:** this endpoint is available in Alfresco 5.2 and newer versions.

Delete an association, or associations, from the source **nodeId* to a target node for the given association type.

If the association type is **not** specified, then all peer associations, of any type, in the direction
from source to target, are deleted.

**Note:** After removal of the peer association, or associations, from source to target, the two nodes may still have peer associations
in the other direction.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nodeId The identifier of a source node.
 @param targetId The identifier of a target node.
 @return ApiDeleteAssociationRequest
*/
func (a *NodesApiService) DeleteAssociation(ctx context.Context, nodeId string, targetId string) ApiDeleteAssociationRequest {
	return ApiDeleteAssociationRequest{
		ApiService: a,
		ctx: ctx,
		nodeId: nodeId,
		targetId: targetId,
	}
}

// Execute executes the request
func (a *NodesApiService) DeleteAssociationExecute(r ApiDeleteAssociationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodesApiService.DeleteAssociation")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/nodes/{nodeId}/targets/{targetId}"
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", url.PathEscape(parameterValueToString(r.nodeId, "nodeId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"targetId"+"}", url.PathEscape(parameterValueToString(r.targetId, "targetId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.assocType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "assocType", r.assocType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteNodeRequest struct {
	ctx context.Context
	ApiService *NodesApiService
	nodeId string
	permanent *bool
}

// If **true** then the node is deleted permanently, without moving to the trashcan. Only the owner of the node or an admin can permanently delete the node. 
func (r ApiDeleteNodeRequest) Permanent(permanent bool) ApiDeleteNodeRequest {
	r.permanent = &permanent
	return r
}

func (r ApiDeleteNodeRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteNodeExecute(r)
}

/*
DeleteNode Delete a node

**Note:** this endpoint is available in Alfresco 5.2 and newer versions.

Deletes the node **nodeId**.

If **nodeId** is a folder, then its children are also deleted.

Deleted nodes move to the trashcan unless the **permanent** query parameter is **true** and the current user is the owner of the node or an admin.

Deleting a node deletes it from its primary parent and also from any secondary parents. Peer associations are also deleted, where the deleted
node is either a source or target of an association. This applies recursively to any hierarchy of primary children of the deleted node.

**Note:** If the node is not permanently deleted, and is later successfully restored to its former primary parent, then the primary
child association is restored. This applies recursively for any primary children. No other secondary child associations or
peer associations are restored for any of the nodes in the primary parent-child hierarchy of restored nodes, regardless of whether the original
associations were to nodes inside or outside the restored hierarchy.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nodeId The identifier of a node.
 @return ApiDeleteNodeRequest
*/
func (a *NodesApiService) DeleteNode(ctx context.Context, nodeId string) ApiDeleteNodeRequest {
	return ApiDeleteNodeRequest{
		ApiService: a,
		ctx: ctx,
		nodeId: nodeId,
	}
}

// Execute executes the request
func (a *NodesApiService) DeleteNodeExecute(r ApiDeleteNodeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodesApiService.DeleteNode")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/nodes/{nodeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", url.PathEscape(parameterValueToString(r.nodeId, "nodeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.permanent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "permanent", r.permanent, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteSecondaryChildAssociationRequest struct {
	ctx context.Context
	ApiService *NodesApiService
	nodeId string
	childId string
	assocType *string
}

// Only delete associations of this type.
func (r ApiDeleteSecondaryChildAssociationRequest) AssocType(assocType string) ApiDeleteSecondaryChildAssociationRequest {
	r.assocType = &assocType
	return r
}

func (r ApiDeleteSecondaryChildAssociationRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSecondaryChildAssociationExecute(r)
}

/*
DeleteSecondaryChildAssociation Delete secondary child or children

**Note:** this endpoint is available in Alfresco 5.2 and newer versions.

Delete secondary child associations between the parent **nodeId** and child nodes for the given association type.

If the association type is **not** specified, then all secondary child associations, of any type in the direction
from parent to secondary child, will be deleted. The child will still have a primary parent and may still be
associated as a secondary child with other secondary parents.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nodeId The identifier of a parent node.
 @param childId The identifier of a child node.
 @return ApiDeleteSecondaryChildAssociationRequest
*/
func (a *NodesApiService) DeleteSecondaryChildAssociation(ctx context.Context, nodeId string, childId string) ApiDeleteSecondaryChildAssociationRequest {
	return ApiDeleteSecondaryChildAssociationRequest{
		ApiService: a,
		ctx: ctx,
		nodeId: nodeId,
		childId: childId,
	}
}

// Execute executes the request
func (a *NodesApiService) DeleteSecondaryChildAssociationExecute(r ApiDeleteSecondaryChildAssociationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodesApiService.DeleteSecondaryChildAssociation")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/nodes/{nodeId}/secondary-children/{childId}"
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", url.PathEscape(parameterValueToString(r.nodeId, "nodeId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"childId"+"}", url.PathEscape(parameterValueToString(r.childId, "childId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.assocType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "assocType", r.assocType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetNodeRequest struct {
	ctx context.Context
	ApiService *NodesApiService
	nodeId string
	include *[]string
	relativePath *string
	fields *[]string
}

// Returns additional information about the node. The following optional fields can be requested: * allowableOperations * association * isLink * isFavorite * isLocked * path * permissions * definition 
func (r ApiGetNodeRequest) Include(include []string) ApiGetNodeRequest {
	r.include = &include
	return r
}

// A path relative to the **nodeId**. If you set this, information is returned on the node resolved by this path. 
func (r ApiGetNodeRequest) RelativePath(relativePath string) ApiGetNodeRequest {
	r.relativePath = &relativePath
	return r
}

// A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
func (r ApiGetNodeRequest) Fields(fields []string) ApiGetNodeRequest {
	r.fields = &fields
	return r
}

func (r ApiGetNodeRequest) Execute() (*NodeEntry, *http.Response, error) {
	return r.ApiService.GetNodeExecute(r)
}

/*
GetNode Get a node

**Note:** this endpoint is available in Alfresco 5.2 and newer versions.

Get information for node **nodeId**.

You can use the **include** parameter to return additional information.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nodeId The identifier of a node. You can also use one of these well-known aliases: * -my- * -shared- * -root- 
 @return ApiGetNodeRequest
*/
func (a *NodesApiService) GetNode(ctx context.Context, nodeId string) ApiGetNodeRequest {
	return ApiGetNodeRequest{
		ApiService: a,
		ctx: ctx,
		nodeId: nodeId,
	}
}

// Execute executes the request
//  @return NodeEntry
func (a *NodesApiService) GetNodeExecute(r ApiGetNodeRequest) (*NodeEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NodeEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodesApiService.GetNode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/nodes/{nodeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", url.PathEscape(parameterValueToString(r.nodeId, "nodeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.relativePath != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePath", r.relativePath, "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetNodeContentRequest struct {
	ctx context.Context
	ApiService *NodesApiService
	nodeId string
	attachment *bool
	ifModifiedSince *time.Time
	range_ *string
}

// **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response. 
func (r ApiGetNodeContentRequest) Attachment(attachment bool) ApiGetNodeContentRequest {
	r.attachment = &attachment
	return r
}

// Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;. 
func (r ApiGetNodeContentRequest) IfModifiedSince(ifModifiedSince time.Time) ApiGetNodeContentRequest {
	r.ifModifiedSince = &ifModifiedSince
	return r
}

// The Range header indicates the part of a document that the server should return. Single part request supported, for example: bytes&#x3D;1-10. 
func (r ApiGetNodeContentRequest) Range_(range_ string) ApiGetNodeContentRequest {
	r.range_ = &range_
	return r
}

func (r ApiGetNodeContentRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GetNodeContentExecute(r)
}

/*
GetNodeContent Get node content

**Note:** this endpoint is available in Alfresco 5.2 and newer versions.

Gets the content of the node with identifier **nodeId**.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nodeId The identifier of a node.
 @return ApiGetNodeContentRequest
*/
func (a *NodesApiService) GetNodeContent(ctx context.Context, nodeId string) ApiGetNodeContentRequest {
	return ApiGetNodeContentRequest{
		ApiService: a,
		ctx: ctx,
		nodeId: nodeId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *NodesApiService) GetNodeContentExecute(r ApiGetNodeContentRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodesApiService.GetNodeContent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/nodes/{nodeId}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", url.PathEscape(parameterValueToString(r.nodeId, "nodeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.attachment != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attachment", r.attachment, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifModifiedSince != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-Modified-Since", r.ifModifiedSince, "")
	}
	if r.range_ != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Range", r.range_, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListNodeChildrenRequest struct {
	ctx context.Context
	ApiService *NodesApiService
	nodeId string
	skipCount *int32
	maxItems *int32
	orderBy *[]string
	where *string
	include *[]string
	relativePath *string
	includeSource *bool
	fields *[]string
}

// The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0. 
func (r ApiListNodeChildrenRequest) SkipCount(skipCount int32) ApiListNodeChildrenRequest {
	r.skipCount = &skipCount
	return r
}

// The maximum number of items to return in the list. If not supplied then the default value is 100. 
func (r ApiListNodeChildrenRequest) MaxItems(maxItems int32) ApiListNodeChildrenRequest {
	r.maxItems = &maxItems
	return r
}

// A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field. 
func (r ApiListNodeChildrenRequest) OrderBy(orderBy []string) ApiListNodeChildrenRequest {
	r.orderBy = &orderBy
	return r
}

// Optionally filter the list. Here are some examples:  *   &#x60;&#x60;&#x60;where&#x3D;(isFolder&#x3D;true)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(isFile&#x3D;true)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(nodeType&#x3D;&#39;my:specialNodeType&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(nodeType&#x3D;&#39;my:specialNodeType INCLUDESUBTYPES&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(isPrimary&#x3D;true)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(assocType&#x3D;&#39;my:specialAssocType&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(isPrimary&#x3D;false and assocType&#x3D;&#39;my:specialAssocType&#39;)&#x60;&#x60;&#x60; 
func (r ApiListNodeChildrenRequest) Where(where string) ApiListNodeChildrenRequest {
	r.where = &where
	return r
}

// Returns additional information about the node. The following optional fields can be requested: * allowableOperations * aspectNames * association * isLink * isFavorite * isLocked * path * properties * permissions 
func (r ApiListNodeChildrenRequest) Include(include []string) ApiListNodeChildrenRequest {
	r.include = &include
	return r
}

// Return information on children in the folder resolved by this path. The path is relative to **nodeId**.
func (r ApiListNodeChildrenRequest) RelativePath(relativePath string) ApiListNodeChildrenRequest {
	r.relativePath = &relativePath
	return r
}

// Also include **source** in addition to **entries** with folder information on the parent node Ã¢â‚¬â€œ either the specified parent **nodeId**, or as resolved by **relativePath**.
func (r ApiListNodeChildrenRequest) IncludeSource(includeSource bool) ApiListNodeChildrenRequest {
	r.includeSource = &includeSource
	return r
}

// A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
func (r ApiListNodeChildrenRequest) Fields(fields []string) ApiListNodeChildrenRequest {
	r.fields = &fields
	return r
}

func (r ApiListNodeChildrenRequest) Execute() (*NodeChildAssociationPaging, *http.Response, error) {
	return r.ApiService.ListNodeChildrenExecute(r)
}

/*
ListNodeChildren List node children

**Note:** this endpoint is available in Alfresco 5.2 and newer versions.

Gets a list of children of the parent node **nodeId**.

Minimal information for each child is returned by default.

You can use the **include** parameter to return additional information.

The list of child nodes includes primary children and secondary children, if there are any.

You can use the **include** parameter (include=association) to return child association details
for each child, including the **assocTyp**e and the **isPrimary** flag.

The default sort order for the returned list is for folders to be sorted before files, and by ascending name.

You can override the default using **orderBy** to specify one or more fields to sort by. The default order is always ascending, but
you can use an optional **ASC** or **DESC** modifier to specify an ascending or descending sort order.

For example, specifying ```orderBy=name DESC``` returns a mixed folder/file list in descending **name** order.

You can use any of the following fields to order the results:
* isFolder
* name
* mimeType
* nodeType
* sizeInBytes
* modifiedAt
* createdAt
* modifiedByUser
* createdByUser


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nodeId The identifier of a node. You can also use one of these well-known aliases: * -my- * -shared- * -root- 
 @return ApiListNodeChildrenRequest
*/
func (a *NodesApiService) ListNodeChildren(ctx context.Context, nodeId string) ApiListNodeChildrenRequest {
	return ApiListNodeChildrenRequest{
		ApiService: a,
		ctx: ctx,
		nodeId: nodeId,
	}
}

// Execute executes the request
//  @return NodeChildAssociationPaging
func (a *NodesApiService) ListNodeChildrenExecute(r ApiListNodeChildrenRequest) (*NodeChildAssociationPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NodeChildAssociationPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodesApiService.ListNodeChildren")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/nodes/{nodeId}/children"
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", url.PathEscape(parameterValueToString(r.nodeId, "nodeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.skipCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipCount", r.skipCount, "")
	}
	if r.maxItems != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxItems", r.maxItems, "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "csv")
	}
	if r.where != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "where", r.where, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.relativePath != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "relativePath", r.relativePath, "")
	}
	if r.includeSource != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeSource", r.includeSource, "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListParentsRequest struct {
	ctx context.Context
	ApiService *NodesApiService
	nodeId string
	where *string
	include *[]string
	skipCount *int32
	maxItems *int32
	includeSource *bool
	fields *[]string
}

// Optionally filter the list by **assocType** and/or **isPrimary**. Here are some example filters:  *   &#x60;&#x60;&#x60;where&#x3D;(assocType&#x3D;&#39;my:specialAssocType&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(isPrimary&#x3D;true)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(isPrimary&#x3D;false and assocType&#x3D;&#39;my:specialAssocType&#39;)&#x60;&#x60;&#x60; 
func (r ApiListParentsRequest) Where(where string) ApiListParentsRequest {
	r.where = &where
	return r
}

// Returns additional information about the node. The following optional fields can be requested: * allowableOperations * aspectNames * isLink * isFavorite * isLocked * path * properties 
func (r ApiListParentsRequest) Include(include []string) ApiListParentsRequest {
	r.include = &include
	return r
}

// The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0. 
func (r ApiListParentsRequest) SkipCount(skipCount int32) ApiListParentsRequest {
	r.skipCount = &skipCount
	return r
}

// The maximum number of items to return in the list. If not supplied then the default value is 100. 
func (r ApiListParentsRequest) MaxItems(maxItems int32) ApiListParentsRequest {
	r.maxItems = &maxItems
	return r
}

// Also include **source** (in addition to **entries**) with folder information on **nodeId**
func (r ApiListParentsRequest) IncludeSource(includeSource bool) ApiListParentsRequest {
	r.includeSource = &includeSource
	return r
}

// A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
func (r ApiListParentsRequest) Fields(fields []string) ApiListParentsRequest {
	r.fields = &fields
	return r
}

func (r ApiListParentsRequest) Execute() (*NodeAssociationPaging, *http.Response, error) {
	return r.ApiService.ListParentsExecute(r)
}

/*
ListParents List parents

**Note:** this endpoint is available in Alfresco 5.2 and newer versions.

Gets a list of parent nodes that are associated with the current child **nodeId**.

The list includes both the primary parent and any secondary parents.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nodeId The identifier of a child node. You can also use one of these well-known aliases: * -my- * -shared- * -root- 
 @return ApiListParentsRequest
*/
func (a *NodesApiService) ListParents(ctx context.Context, nodeId string) ApiListParentsRequest {
	return ApiListParentsRequest{
		ApiService: a,
		ctx: ctx,
		nodeId: nodeId,
	}
}

// Execute executes the request
//  @return NodeAssociationPaging
func (a *NodesApiService) ListParentsExecute(r ApiListParentsRequest) (*NodeAssociationPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NodeAssociationPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodesApiService.ListParents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/nodes/{nodeId}/parents"
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", url.PathEscape(parameterValueToString(r.nodeId, "nodeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.where != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "where", r.where, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.skipCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipCount", r.skipCount, "")
	}
	if r.maxItems != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxItems", r.maxItems, "")
	}
	if r.includeSource != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeSource", r.includeSource, "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSecondaryChildrenRequest struct {
	ctx context.Context
	ApiService *NodesApiService
	nodeId string
	where *string
	include *[]string
	skipCount *int32
	maxItems *int32
	includeSource *bool
	fields *[]string
}

// Optionally filter the list by assocType. Here&#39;s an example:  *   &#x60;&#x60;&#x60;where&#x3D;(assocType&#x3D;&#39;my:specialAssocType&#39;)&#x60;&#x60;&#x60; 
func (r ApiListSecondaryChildrenRequest) Where(where string) ApiListSecondaryChildrenRequest {
	r.where = &where
	return r
}

// Returns additional information about the node. The following optional fields can be requested: * allowableOperations * aspectNames * isLink * isFavorite * isLocked * path * properties 
func (r ApiListSecondaryChildrenRequest) Include(include []string) ApiListSecondaryChildrenRequest {
	r.include = &include
	return r
}

// The number of entities that exist in the collection before those included in this list. If not supplied then the default value is 0. 
func (r ApiListSecondaryChildrenRequest) SkipCount(skipCount int32) ApiListSecondaryChildrenRequest {
	r.skipCount = &skipCount
	return r
}

// The maximum number of items to return in the list. If not supplied then the default value is 100. 
func (r ApiListSecondaryChildrenRequest) MaxItems(maxItems int32) ApiListSecondaryChildrenRequest {
	r.maxItems = &maxItems
	return r
}

// Also include **source** (in addition to **entries**) with folder information on **nodeId**
func (r ApiListSecondaryChildrenRequest) IncludeSource(includeSource bool) ApiListSecondaryChildrenRequest {
	r.includeSource = &includeSource
	return r
}

// A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
func (r ApiListSecondaryChildrenRequest) Fields(fields []string) ApiListSecondaryChildrenRequest {
	r.fields = &fields
	return r
}

func (r ApiListSecondaryChildrenRequest) Execute() (*NodeChildAssociationPaging, *http.Response, error) {
	return r.ApiService.ListSecondaryChildrenExecute(r)
}

/*
ListSecondaryChildren List secondary children

**Note:** this endpoint is available in Alfresco 5.2 and newer versions.

Gets a list of secondary child nodes that are associated with the current parent **nodeId**, via a secondary child association.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nodeId The identifier of a parent node. You can also use one of these well-known aliases: * -my- * -shared- * -root- 
 @return ApiListSecondaryChildrenRequest
*/
func (a *NodesApiService) ListSecondaryChildren(ctx context.Context, nodeId string) ApiListSecondaryChildrenRequest {
	return ApiListSecondaryChildrenRequest{
		ApiService: a,
		ctx: ctx,
		nodeId: nodeId,
	}
}

// Execute executes the request
//  @return NodeChildAssociationPaging
func (a *NodesApiService) ListSecondaryChildrenExecute(r ApiListSecondaryChildrenRequest) (*NodeChildAssociationPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NodeChildAssociationPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodesApiService.ListSecondaryChildren")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/nodes/{nodeId}/secondary-children"
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", url.PathEscape(parameterValueToString(r.nodeId, "nodeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.where != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "where", r.where, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.skipCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skipCount", r.skipCount, "")
	}
	if r.maxItems != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxItems", r.maxItems, "")
	}
	if r.includeSource != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeSource", r.includeSource, "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSourceAssociationsRequest struct {
	ctx context.Context
	ApiService *NodesApiService
	nodeId string
	where *string
	include *[]string
	fields *[]string
}

// Optionally filter the list by **assocType**. Here&#39;s an example:  *   &#x60;&#x60;&#x60;where&#x3D;(assocType&#x3D;&#39;my:specialAssocType&#39;)&#x60;&#x60;&#x60; 
func (r ApiListSourceAssociationsRequest) Where(where string) ApiListSourceAssociationsRequest {
	r.where = &where
	return r
}

// Returns additional information about the node. The following optional fields can be requested: * allowableOperations * aspectNames * isLink * isFavorite * isLocked * path * properties 
func (r ApiListSourceAssociationsRequest) Include(include []string) ApiListSourceAssociationsRequest {
	r.include = &include
	return r
}

// A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
func (r ApiListSourceAssociationsRequest) Fields(fields []string) ApiListSourceAssociationsRequest {
	r.fields = &fields
	return r
}

func (r ApiListSourceAssociationsRequest) Execute() (*NodeAssociationPaging, *http.Response, error) {
	return r.ApiService.ListSourceAssociationsExecute(r)
}

/*
ListSourceAssociations List source associations

**Note:** this endpoint is available in Alfresco 5.2 and newer versions.

Gets a list of source nodes that are associated with the current target **nodeId**.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nodeId The identifier of a target node.
 @return ApiListSourceAssociationsRequest
*/
func (a *NodesApiService) ListSourceAssociations(ctx context.Context, nodeId string) ApiListSourceAssociationsRequest {
	return ApiListSourceAssociationsRequest{
		ApiService: a,
		ctx: ctx,
		nodeId: nodeId,
	}
}

// Execute executes the request
//  @return NodeAssociationPaging
func (a *NodesApiService) ListSourceAssociationsExecute(r ApiListSourceAssociationsRequest) (*NodeAssociationPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NodeAssociationPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodesApiService.ListSourceAssociations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/nodes/{nodeId}/sources"
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", url.PathEscape(parameterValueToString(r.nodeId, "nodeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.where != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "where", r.where, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListTargetAssociationsRequest struct {
	ctx context.Context
	ApiService *NodesApiService
	nodeId string
	where *string
	include *[]string
	fields *[]string
}

// Optionally filter the list by **assocType**. Here&#39;s an example:  *   &#x60;&#x60;&#x60;where&#x3D;(assocType&#x3D;&#39;my:specialAssocType&#39;)&#x60;&#x60;&#x60; 
func (r ApiListTargetAssociationsRequest) Where(where string) ApiListTargetAssociationsRequest {
	r.where = &where
	return r
}

// Returns additional information about the node. The following optional fields can be requested: * allowableOperations * aspectNames * isLink * isFavorite * isLocked * path * properties 
func (r ApiListTargetAssociationsRequest) Include(include []string) ApiListTargetAssociationsRequest {
	r.include = &include
	return r
}

// A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
func (r ApiListTargetAssociationsRequest) Fields(fields []string) ApiListTargetAssociationsRequest {
	r.fields = &fields
	return r
}

func (r ApiListTargetAssociationsRequest) Execute() (*NodeAssociationPaging, *http.Response, error) {
	return r.ApiService.ListTargetAssociationsExecute(r)
}

/*
ListTargetAssociations List target associations

**Note:** this endpoint is available in Alfresco 5.2 and newer versions.

Gets a list of target nodes that are associated with the current source **nodeId**.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nodeId The identifier of a source node.
 @return ApiListTargetAssociationsRequest
*/
func (a *NodesApiService) ListTargetAssociations(ctx context.Context, nodeId string) ApiListTargetAssociationsRequest {
	return ApiListTargetAssociationsRequest{
		ApiService: a,
		ctx: ctx,
		nodeId: nodeId,
	}
}

// Execute executes the request
//  @return NodeAssociationPaging
func (a *NodesApiService) ListTargetAssociationsExecute(r ApiListTargetAssociationsRequest) (*NodeAssociationPaging, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NodeAssociationPaging
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodesApiService.ListTargetAssociations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/nodes/{nodeId}/targets"
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", url.PathEscape(parameterValueToString(r.nodeId, "nodeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.where != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "where", r.where, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLockNodeRequest struct {
	ctx context.Context
	ApiService *NodesApiService
	nodeId string
	nodeBodyLock *NodeBodyLock
	include *[]string
	fields *[]string
}

// Lock details.
func (r ApiLockNodeRequest) NodeBodyLock(nodeBodyLock NodeBodyLock) ApiLockNodeRequest {
	r.nodeBodyLock = &nodeBodyLock
	return r
}

// Returns additional information about the node. The following optional fields can be requested: * allowableOperations * association * isLink * isFavorite * isLocked * path * permissions * definition 
func (r ApiLockNodeRequest) Include(include []string) ApiLockNodeRequest {
	r.include = &include
	return r
}

// A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
func (r ApiLockNodeRequest) Fields(fields []string) ApiLockNodeRequest {
	r.fields = &fields
	return r
}

func (r ApiLockNodeRequest) Execute() (*NodeEntry, *http.Response, error) {
	return r.ApiService.LockNodeExecute(r)
}

/*
LockNode Lock a node

**Note:** this endpoint is available in Alfresco 5.2 and newer versions.

Places a lock on node **nodeId**.

**Note:** you can only lock files. More specifically, a node can only be locked if it is
of type `cm:content` or a subtype of `cm:content`.

The lock is owned by the current user, and prevents other users or processes from making updates to the node until the lock is released.

If the **timeToExpire** is not set or is zero, then the lock never expires.  Otherwise, the **timeToExpire** is the number of seconds before the lock expires.

When a lock expires, the lock is released.

If the node is already locked, and the user is the lock owner, then the lock is renewed with the new **timeToExpire**.

By default, a lock is applied that allows the owner to update or delete the node.
You can use **type** to change the lock type to one of the following:
* **ALLOW_OWNER_CHANGES** (default) changes to the node can be made only by the lock owner. This enum is the same value as the deprecated WRITE_LOCK described in `org.alfresco.service.cmr.lock.LockType` in the Alfresco Public Java API. This is the default value.
* **FULL** no changes by any user are allowed. This enum is the same value as the deprecated READ_ONLY_LOCK described in `org.alfresco.service.cmr.lock.LockType` in the Alfresco Public Java API.

By default, a lock is persisted in the database. You can create a volatile in-memory lock by setting the **lifetime** property to EPHEMERAL.
You might choose use EPHEMERAL locks, for example, if you are taking frequent short-term locks that you don't need
to be kept over a restart of the repository. In this case you don't need the
overhead of writing the locks to the database.

If a lock on the node cannot be taken, then an error is returned.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nodeId The identifier of a node.
 @return ApiLockNodeRequest
*/
func (a *NodesApiService) LockNode(ctx context.Context, nodeId string) ApiLockNodeRequest {
	return ApiLockNodeRequest{
		ApiService: a,
		ctx: ctx,
		nodeId: nodeId,
	}
}

// Execute executes the request
//  @return NodeEntry
func (a *NodesApiService) LockNodeExecute(r ApiLockNodeRequest) (*NodeEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NodeEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodesApiService.LockNode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/nodes/{nodeId}/lock"
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", url.PathEscape(parameterValueToString(r.nodeId, "nodeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nodeBodyLock == nil {
		return localVarReturnValue, nil, reportError("nodeBodyLock is required and must be specified")
	}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nodeBodyLock
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMoveNodeRequest struct {
	ctx context.Context
	ApiService *NodesApiService
	nodeId string
	nodeBodyMove *NodeBodyMove
	include *[]string
	fields *[]string
}

// The targetParentId and, optionally, a new name which should include the fileÃ‚ extension.
func (r ApiMoveNodeRequest) NodeBodyMove(nodeBodyMove NodeBodyMove) ApiMoveNodeRequest {
	r.nodeBodyMove = &nodeBodyMove
	return r
}

// Returns additional information about the node. The following optional fields can be requested: * allowableOperations * association * isLink * isFavorite * isLocked * path * permissions * definition 
func (r ApiMoveNodeRequest) Include(include []string) ApiMoveNodeRequest {
	r.include = &include
	return r
}

// A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
func (r ApiMoveNodeRequest) Fields(fields []string) ApiMoveNodeRequest {
	r.fields = &fields
	return r
}

func (r ApiMoveNodeRequest) Execute() (*NodeEntry, *http.Response, error) {
	return r.ApiService.MoveNodeExecute(r)
}

/*
MoveNode Move a node

**Note:** this endpoint is available in Alfresco 5.2 and newer versions.

Move the node **nodeId** to the parent folder node **targetParentId**.

The **targetParentId** is specified in the in request body.

The moved node retains its name unless you specify a new **name** in the request body.

If the source **nodeId** is a folder, then its children are also moved.

The move will effectively change the primary parent.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nodeId The identifier of a node.
 @return ApiMoveNodeRequest
*/
func (a *NodesApiService) MoveNode(ctx context.Context, nodeId string) ApiMoveNodeRequest {
	return ApiMoveNodeRequest{
		ApiService: a,
		ctx: ctx,
		nodeId: nodeId,
	}
}

// Execute executes the request
//  @return NodeEntry
func (a *NodesApiService) MoveNodeExecute(r ApiMoveNodeRequest) (*NodeEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NodeEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodesApiService.MoveNode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/nodes/{nodeId}/move"
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", url.PathEscape(parameterValueToString(r.nodeId, "nodeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nodeBodyMove == nil {
		return localVarReturnValue, nil, reportError("nodeBodyMove is required and must be specified")
	}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nodeBodyMove
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUnlockNodeRequest struct {
	ctx context.Context
	ApiService *NodesApiService
	nodeId string
	include *[]string
	fields *[]string
}

// Returns additional information about the node. The following optional fields can be requested: * allowableOperations * association * isLink * isFavorite * isLocked * path * permissions * definition 
func (r ApiUnlockNodeRequest) Include(include []string) ApiUnlockNodeRequest {
	r.include = &include
	return r
}

// A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
func (r ApiUnlockNodeRequest) Fields(fields []string) ApiUnlockNodeRequest {
	r.fields = &fields
	return r
}

func (r ApiUnlockNodeRequest) Execute() (*NodeEntry, *http.Response, error) {
	return r.ApiService.UnlockNodeExecute(r)
}

/*
UnlockNode Unlock a node

**Note:** this endpoint is available in Alfresco 5.2 and newer versions.

Deletes a lock on node **nodeId**.

The current user must be the owner of the locks or have admin rights, otherwise an error is returned.

If a lock on the node cannot be released, then an error is returned.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nodeId The identifier of a node.
 @return ApiUnlockNodeRequest
*/
func (a *NodesApiService) UnlockNode(ctx context.Context, nodeId string) ApiUnlockNodeRequest {
	return ApiUnlockNodeRequest{
		ApiService: a,
		ctx: ctx,
		nodeId: nodeId,
	}
}

// Execute executes the request
//  @return NodeEntry
func (a *NodesApiService) UnlockNodeExecute(r ApiUnlockNodeRequest) (*NodeEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NodeEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodesApiService.UnlockNode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/nodes/{nodeId}/unlock"
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", url.PathEscape(parameterValueToString(r.nodeId, "nodeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateNodeRequest struct {
	ctx context.Context
	ApiService *NodesApiService
	nodeId string
	nodeBodyUpdate *NodeBodyUpdate
	include *[]string
	fields *[]string
}

// The node information to update.
func (r ApiUpdateNodeRequest) NodeBodyUpdate(nodeBodyUpdate NodeBodyUpdate) ApiUpdateNodeRequest {
	r.nodeBodyUpdate = &nodeBodyUpdate
	return r
}

// Returns additional information about the node. The following optional fields can be requested: * allowableOperations * association * isLink * isFavorite * isLocked * path * permissions * definition 
func (r ApiUpdateNodeRequest) Include(include []string) ApiUpdateNodeRequest {
	r.include = &include
	return r
}

// A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
func (r ApiUpdateNodeRequest) Fields(fields []string) ApiUpdateNodeRequest {
	r.fields = &fields
	return r
}

func (r ApiUpdateNodeRequest) Execute() (*NodeEntry, *http.Response, error) {
	return r.ApiService.UpdateNodeExecute(r)
}

/*
UpdateNode Update a node

**Note:** this endpoint is available in Alfresco 5.2 and newer versions.

Updates the node **nodeId**. For example, you can rename a file or folder:
```JSON
{
  "name":"My new name"
}
```
You can also set or update one or more properties:
```JSON
{
  "properties":
  {
    "cm:title":"Folder title"
  }
}
```
You can update multi-value properties of a node which supports properties of type multiple.
 ```JSON
{
  "name":"My Other Folder",
  "nodeType":"custom:destination",
  "properties":
  {
    "cm:title":"Folder title",
    "cm:description":"This is an important folder",
    "custom:locations": [
                         "location NewX",
                         "location NewY"
                        ]
  }
}
```

**Note:** setting properties of type d:content and d:category are not supported.

**Note:** if you want to add or remove aspects, then you must use **GET /nodes/{nodeId}** first to get the complete set of *aspectNames*.

You can add (or remove) *locallySet* permissions, if any, in addition to any inherited permissions.
You can also optionally disable (or re-enable) inherited permissions via *isInheritanceEnabled* flag:
```JSON
{
  "permissions":
    {
      "isInheritanceEnabled": false,
      "locallySet":
        [
          {"authorityId": "GROUP_special", "name": "Read", "accessStatus":"DENIED"},
          {"authorityId": "testuser", "name": "Contributor", "accessStatus":"ALLOWED"}
        ]
    }
}
```
**Note:** if you want to add or remove locally set permissions then you must use **GET /nodes/{nodeId}** first to get the complete set of *locallySet* permissions.

**Note:** Currently there is no optimistic locking for updates, so they are applied in "last one wins" order.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nodeId The identifier of a node.
 @return ApiUpdateNodeRequest
*/
func (a *NodesApiService) UpdateNode(ctx context.Context, nodeId string) ApiUpdateNodeRequest {
	return ApiUpdateNodeRequest{
		ApiService: a,
		ctx: ctx,
		nodeId: nodeId,
	}
}

// Execute executes the request
//  @return NodeEntry
func (a *NodesApiService) UpdateNodeExecute(r ApiUpdateNodeRequest) (*NodeEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NodeEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodesApiService.UpdateNode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/nodes/{nodeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", url.PathEscape(parameterValueToString(r.nodeId, "nodeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nodeBodyUpdate == nil {
		return localVarReturnValue, nil, reportError("nodeBodyUpdate is required and must be specified")
	}

	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nodeBodyUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateNodeContentRequest struct {
	ctx context.Context
	ApiService *NodesApiService
	nodeId string
	contentBodyUpdate *os.File
	majorVersion *bool
	comment *string
	name *string
	include *[]string
	fields *[]string
}

// The binary content
func (r ApiUpdateNodeContentRequest) ContentBodyUpdate(contentBodyUpdate *os.File) ApiUpdateNodeContentRequest {
	r.contentBodyUpdate = contentBodyUpdate
	return r
}

// If **true**, create a major version. Setting this parameter also enables versioning of this node, if it is not already versioned. 
func (r ApiUpdateNodeContentRequest) MajorVersion(majorVersion bool) ApiUpdateNodeContentRequest {
	r.majorVersion = &majorVersion
	return r
}

// Add a version comment which will appear in version history. Setting this parameter also enables versioning of this node, if it is not already versioned. 
func (r ApiUpdateNodeContentRequest) Comment(comment string) ApiUpdateNodeContentRequest {
	r.comment = &comment
	return r
}

// Optional new name. This should include the fileÃ‚ extension. The name must not contain spaces or the following special characters: * \&quot; &lt; &gt; \\ / ? : and |. The character &#x60;.&#x60; must not be used at the end of the name. 
func (r ApiUpdateNodeContentRequest) Name(name string) ApiUpdateNodeContentRequest {
	r.name = &name
	return r
}

// Returns additional information about the node. The following optional fields can be requested: * allowableOperations * association * isLink * isFavorite * isLocked * path * permissions * definition 
func (r ApiUpdateNodeContentRequest) Include(include []string) ApiUpdateNodeContentRequest {
	r.include = &include
	return r
}

// A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. 
func (r ApiUpdateNodeContentRequest) Fields(fields []string) ApiUpdateNodeContentRequest {
	r.fields = &fields
	return r
}

func (r ApiUpdateNodeContentRequest) Execute() (*NodeEntry, *http.Response, error) {
	return r.ApiService.UpdateNodeContentExecute(r)
}

/*
UpdateNodeContent Update node content

**Note:** this endpoint is available in Alfresco 5.2 and newer versions.

Updates the content of the node with identifier **nodeId**.

The request body for this endpoint can be any text or binary stream.

The **majorVersion** and **comment** parameters can be used to control versioning behaviour. If the content is versionable,
a new minor version is created by default.

Optionally a new **name** parameter can also be specified that must be unique within the parent folder. If specified and valid then this
will rename the node. If invalid then an error is returned and the content is not updated.

**Note:** This API method accepts any content type, but for testing with this tool text based content can be provided.
This is because the OpenAPI Specification does not allow a wildcard to be provided or the ability for
tooling to accept an arbitrary file.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param nodeId The identifier of a node.
 @return ApiUpdateNodeContentRequest
*/
func (a *NodesApiService) UpdateNodeContent(ctx context.Context, nodeId string) ApiUpdateNodeContentRequest {
	return ApiUpdateNodeContentRequest{
		ApiService: a,
		ctx: ctx,
		nodeId: nodeId,
	}
}

// Execute executes the request
//  @return NodeEntry
func (a *NodesApiService) UpdateNodeContentExecute(r ApiUpdateNodeContentRequest) (*NodeEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NodeEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodesApiService.UpdateNodeContent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/nodes/{nodeId}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"nodeId"+"}", url.PathEscape(parameterValueToString(r.nodeId, "nodeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contentBodyUpdate == nil {
		return localVarReturnValue, nil, reportError("contentBodyUpdate is required and must be specified")
	}

	if r.majorVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "majorVersion", r.majorVersion, "")
	}
	if r.comment != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comment", r.comment, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.contentBodyUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
