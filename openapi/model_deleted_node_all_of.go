/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"github.com/ahuret/goalfresco/time"
)

// checks if the DeletedNodeAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeletedNodeAllOf{}

// DeletedNodeAllOf struct for DeletedNodeAllOf
type DeletedNodeAllOf struct {
	ArchivedByUser UserInfo `json:"archivedByUser"`
	ArchivedAt time.Time `json:"archivedAt"`
}

// NewDeletedNodeAllOf instantiates a new DeletedNodeAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeletedNodeAllOf(archivedByUser UserInfo, archivedAt time.Time) *DeletedNodeAllOf {
	this := DeletedNodeAllOf{}
	this.ArchivedByUser = archivedByUser
	this.ArchivedAt = archivedAt
	return &this
}

// NewDeletedNodeAllOfWithDefaults instantiates a new DeletedNodeAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeletedNodeAllOfWithDefaults() *DeletedNodeAllOf {
	this := DeletedNodeAllOf{}
	return &this
}

// GetArchivedByUser returns the ArchivedByUser field value
func (o *DeletedNodeAllOf) GetArchivedByUser() UserInfo {
	if o == nil {
		var ret UserInfo
		return ret
	}

	return o.ArchivedByUser
}

// GetArchivedByUserOk returns a tuple with the ArchivedByUser field value
// and a boolean to check if the value has been set.
func (o *DeletedNodeAllOf) GetArchivedByUserOk() (*UserInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArchivedByUser, true
}

// SetArchivedByUser sets field value
func (o *DeletedNodeAllOf) SetArchivedByUser(v UserInfo) {
	o.ArchivedByUser = v
}

// GetArchivedAt returns the ArchivedAt field value
func (o *DeletedNodeAllOf) GetArchivedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ArchivedAt
}

// GetArchivedAtOk returns a tuple with the ArchivedAt field value
// and a boolean to check if the value has been set.
func (o *DeletedNodeAllOf) GetArchivedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArchivedAt, true
}

// SetArchivedAt sets field value
func (o *DeletedNodeAllOf) SetArchivedAt(v time.Time) {
	o.ArchivedAt = v
}

func (o DeletedNodeAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeletedNodeAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["archivedByUser"] = o.ArchivedByUser
	toSerialize["archivedAt"] = o.ArchivedAt
	return toSerialize, nil
}

type NullableDeletedNodeAllOf struct {
	value *DeletedNodeAllOf
	isSet bool
}

func (v NullableDeletedNodeAllOf) Get() *DeletedNodeAllOf {
	return v.value
}

func (v *NullableDeletedNodeAllOf) Set(val *DeletedNodeAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDeletedNodeAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDeletedNodeAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeletedNodeAllOf(val *DeletedNodeAllOf) *NullableDeletedNodeAllOf {
	return &NullableDeletedNodeAllOf{value: val, isSet: true}
}

func (v NullableDeletedNodeAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeletedNodeAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


