/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FavoriteSiteEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FavoriteSiteEntry{}

// FavoriteSiteEntry struct for FavoriteSiteEntry
type FavoriteSiteEntry struct {
	Entry FavoriteSite `json:"entry"`
}

// NewFavoriteSiteEntry instantiates a new FavoriteSiteEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFavoriteSiteEntry(entry FavoriteSite) *FavoriteSiteEntry {
	this := FavoriteSiteEntry{}
	this.Entry = entry
	return &this
}

// NewFavoriteSiteEntryWithDefaults instantiates a new FavoriteSiteEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFavoriteSiteEntryWithDefaults() *FavoriteSiteEntry {
	this := FavoriteSiteEntry{}
	return &this
}

// GetEntry returns the Entry field value
func (o *FavoriteSiteEntry) GetEntry() FavoriteSite {
	if o == nil {
		var ret FavoriteSite
		return ret
	}

	return o.Entry
}

// GetEntryOk returns a tuple with the Entry field value
// and a boolean to check if the value has been set.
func (o *FavoriteSiteEntry) GetEntryOk() (*FavoriteSite, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entry, true
}

// SetEntry sets field value
func (o *FavoriteSiteEntry) SetEntry(v FavoriteSite) {
	o.Entry = v
}

func (o FavoriteSiteEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FavoriteSiteEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entry"] = o.Entry
	return toSerialize, nil
}

type NullableFavoriteSiteEntry struct {
	value *FavoriteSiteEntry
	isSet bool
}

func (v NullableFavoriteSiteEntry) Get() *FavoriteSiteEntry {
	return v.value
}

func (v *NullableFavoriteSiteEntry) Set(val *FavoriteSiteEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableFavoriteSiteEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableFavoriteSiteEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFavoriteSiteEntry(val *FavoriteSiteEntry) *NullableFavoriteSiteEntry {
	return &NullableFavoriteSiteEntry{value: val, isSet: true}
}

func (v NullableFavoriteSiteEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFavoriteSiteEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


