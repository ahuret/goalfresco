/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AuditApp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditApp{}

// AuditApp struct for AuditApp
type AuditApp struct {
	Id string `json:"id"`
	Name *string `json:"name,omitempty"`
	IsEnabled *bool `json:"isEnabled,omitempty"`
	MaxEntryId *int32 `json:"maxEntryId,omitempty"`
	MinEntryId *int32 `json:"minEntryId,omitempty"`
}

// NewAuditApp instantiates a new AuditApp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditApp(id string) *AuditApp {
	this := AuditApp{}
	this.Id = id
	var isEnabled bool = true
	this.IsEnabled = &isEnabled
	return &this
}

// NewAuditAppWithDefaults instantiates a new AuditApp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditAppWithDefaults() *AuditApp {
	this := AuditApp{}
	var isEnabled bool = true
	this.IsEnabled = &isEnabled
	return &this
}

// GetId returns the Id field value
func (o *AuditApp) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AuditApp) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AuditApp) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AuditApp) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditApp) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AuditApp) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AuditApp) SetName(v string) {
	o.Name = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *AuditApp) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditApp) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *AuditApp) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *AuditApp) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetMaxEntryId returns the MaxEntryId field value if set, zero value otherwise.
func (o *AuditApp) GetMaxEntryId() int32 {
	if o == nil || IsNil(o.MaxEntryId) {
		var ret int32
		return ret
	}
	return *o.MaxEntryId
}

// GetMaxEntryIdOk returns a tuple with the MaxEntryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditApp) GetMaxEntryIdOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxEntryId) {
		return nil, false
	}
	return o.MaxEntryId, true
}

// HasMaxEntryId returns a boolean if a field has been set.
func (o *AuditApp) HasMaxEntryId() bool {
	if o != nil && !IsNil(o.MaxEntryId) {
		return true
	}

	return false
}

// SetMaxEntryId gets a reference to the given int32 and assigns it to the MaxEntryId field.
func (o *AuditApp) SetMaxEntryId(v int32) {
	o.MaxEntryId = &v
}

// GetMinEntryId returns the MinEntryId field value if set, zero value otherwise.
func (o *AuditApp) GetMinEntryId() int32 {
	if o == nil || IsNil(o.MinEntryId) {
		var ret int32
		return ret
	}
	return *o.MinEntryId
}

// GetMinEntryIdOk returns a tuple with the MinEntryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditApp) GetMinEntryIdOk() (*int32, bool) {
	if o == nil || IsNil(o.MinEntryId) {
		return nil, false
	}
	return o.MinEntryId, true
}

// HasMinEntryId returns a boolean if a field has been set.
func (o *AuditApp) HasMinEntryId() bool {
	if o != nil && !IsNil(o.MinEntryId) {
		return true
	}

	return false
}

// SetMinEntryId gets a reference to the given int32 and assigns it to the MinEntryId field.
func (o *AuditApp) SetMinEntryId(v int32) {
	o.MinEntryId = &v
}

func (o AuditApp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditApp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.IsEnabled) {
		toSerialize["isEnabled"] = o.IsEnabled
	}
	if !IsNil(o.MaxEntryId) {
		toSerialize["maxEntryId"] = o.MaxEntryId
	}
	if !IsNil(o.MinEntryId) {
		toSerialize["minEntryId"] = o.MinEntryId
	}
	return toSerialize, nil
}

type NullableAuditApp struct {
	value *AuditApp
	isSet bool
}

func (v NullableAuditApp) Get() *AuditApp {
	return v.value
}

func (v *NullableAuditApp) Set(val *AuditApp) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditApp) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditApp(val *AuditApp) *NullableAuditApp {
	return &NullableAuditApp{value: val, isSet: true}
}

func (v NullableAuditApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


