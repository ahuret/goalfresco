/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"github.com/ahuret/goalfresco/time"
)

// checks if the Favorite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Favorite{}

// Favorite A favorite describes an Alfresco entity that a person has marked as a favorite. The target can be a site, file or folder. 
type Favorite struct {
	// The guid of the object that is a favorite.
	TargetGuid string `json:"targetGuid"`
	// The time the object was made a favorite.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Target map[string]interface{} `json:"target"`
	// A subset of the target favorite properties, system properties and properties already available in the target are excluded.
	Properties map[string]interface{} `json:"properties,omitempty"`
}

// NewFavorite instantiates a new Favorite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFavorite(targetGuid string, target map[string]interface{}) *Favorite {
	this := Favorite{}
	this.TargetGuid = targetGuid
	this.Target = target
	return &this
}

// NewFavoriteWithDefaults instantiates a new Favorite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFavoriteWithDefaults() *Favorite {
	this := Favorite{}
	return &this
}

// GetTargetGuid returns the TargetGuid field value
func (o *Favorite) GetTargetGuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetGuid
}

// GetTargetGuidOk returns a tuple with the TargetGuid field value
// and a boolean to check if the value has been set.
func (o *Favorite) GetTargetGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetGuid, true
}

// SetTargetGuid sets field value
func (o *Favorite) SetTargetGuid(v string) {
	o.TargetGuid = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Favorite) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Favorite) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Favorite) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Favorite) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetTarget returns the Target field value
func (o *Favorite) GetTarget() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *Favorite) GetTargetOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Target, true
}

// SetTarget sets field value
func (o *Favorite) SetTarget(v map[string]interface{}) {
	o.Target = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *Favorite) GetProperties() map[string]interface{} {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Favorite) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *Favorite) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]interface{} and assigns it to the Properties field.
func (o *Favorite) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

func (o Favorite) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Favorite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["targetGuid"] = o.TargetGuid
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	toSerialize["target"] = o.Target
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

type NullableFavorite struct {
	value *Favorite
	isSet bool
}

func (v NullableFavorite) Get() *Favorite {
	return v.value
}

func (v *NullableFavorite) Set(val *Favorite) {
	v.value = val
	v.isSet = true
}

func (v NullableFavorite) IsSet() bool {
	return v.isSet
}

func (v *NullableFavorite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFavorite(val *Favorite) *NullableFavorite {
	return &NullableFavorite{value: val, isSet: true}
}

func (v NullableFavorite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFavorite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


