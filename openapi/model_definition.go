/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Definition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Definition{}

// Definition struct for Definition
type Definition struct {
	// List of property definitions effective for this node as the result of combining the type with all aspects.
	Properties []Property `json:"properties,omitempty"`
}

// NewDefinition instantiates a new Definition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefinition() *Definition {
	this := Definition{}
	return &this
}

// NewDefinitionWithDefaults instantiates a new Definition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefinitionWithDefaults() *Definition {
	this := Definition{}
	return &this
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *Definition) GetProperties() []Property {
	if o == nil || IsNil(o.Properties) {
		var ret []Property
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Definition) GetPropertiesOk() ([]Property, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *Definition) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []Property and assigns it to the Properties field.
func (o *Definition) SetProperties(v []Property) {
	o.Properties = v
}

func (o Definition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Definition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

type NullableDefinition struct {
	value *Definition
	isSet bool
}

func (v NullableDefinition) Get() *Definition {
	return v.value
}

func (v *NullableDefinition) Set(val *Definition) {
	v.value = val
	v.isSet = true
}

func (v NullableDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefinition(val *Definition) *NullableDefinition {
	return &NullableDefinition{value: val, isSet: true}
}

func (v NullableDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


