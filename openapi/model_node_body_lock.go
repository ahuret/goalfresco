/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NodeBodyLock type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeBodyLock{}

// NodeBodyLock struct for NodeBodyLock
type NodeBodyLock struct {
	TimeToExpire *int32 `json:"timeToExpire,omitempty"`
	Type *string `json:"type,omitempty"`
	Lifetime *string `json:"lifetime,omitempty"`
}

// NewNodeBodyLock instantiates a new NodeBodyLock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeBodyLock() *NodeBodyLock {
	this := NodeBodyLock{}
	var type_ string = "ALLOW_OWNER_CHANGES"
	this.Type = &type_
	var lifetime string = "PERSISTENT"
	this.Lifetime = &lifetime
	return &this
}

// NewNodeBodyLockWithDefaults instantiates a new NodeBodyLock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeBodyLockWithDefaults() *NodeBodyLock {
	this := NodeBodyLock{}
	var type_ string = "ALLOW_OWNER_CHANGES"
	this.Type = &type_
	var lifetime string = "PERSISTENT"
	this.Lifetime = &lifetime
	return &this
}

// GetTimeToExpire returns the TimeToExpire field value if set, zero value otherwise.
func (o *NodeBodyLock) GetTimeToExpire() int32 {
	if o == nil || IsNil(o.TimeToExpire) {
		var ret int32
		return ret
	}
	return *o.TimeToExpire
}

// GetTimeToExpireOk returns a tuple with the TimeToExpire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeBodyLock) GetTimeToExpireOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeToExpire) {
		return nil, false
	}
	return o.TimeToExpire, true
}

// HasTimeToExpire returns a boolean if a field has been set.
func (o *NodeBodyLock) HasTimeToExpire() bool {
	if o != nil && !IsNil(o.TimeToExpire) {
		return true
	}

	return false
}

// SetTimeToExpire gets a reference to the given int32 and assigns it to the TimeToExpire field.
func (o *NodeBodyLock) SetTimeToExpire(v int32) {
	o.TimeToExpire = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NodeBodyLock) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeBodyLock) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NodeBodyLock) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NodeBodyLock) SetType(v string) {
	o.Type = &v
}

// GetLifetime returns the Lifetime field value if set, zero value otherwise.
func (o *NodeBodyLock) GetLifetime() string {
	if o == nil || IsNil(o.Lifetime) {
		var ret string
		return ret
	}
	return *o.Lifetime
}

// GetLifetimeOk returns a tuple with the Lifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeBodyLock) GetLifetimeOk() (*string, bool) {
	if o == nil || IsNil(o.Lifetime) {
		return nil, false
	}
	return o.Lifetime, true
}

// HasLifetime returns a boolean if a field has been set.
func (o *NodeBodyLock) HasLifetime() bool {
	if o != nil && !IsNil(o.Lifetime) {
		return true
	}

	return false
}

// SetLifetime gets a reference to the given string and assigns it to the Lifetime field.
func (o *NodeBodyLock) SetLifetime(v string) {
	o.Lifetime = &v
}

func (o NodeBodyLock) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeBodyLock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TimeToExpire) {
		toSerialize["timeToExpire"] = o.TimeToExpire
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Lifetime) {
		toSerialize["lifetime"] = o.Lifetime
	}
	return toSerialize, nil
}

type NullableNodeBodyLock struct {
	value *NodeBodyLock
	isSet bool
}

func (v NullableNodeBodyLock) Get() *NodeBodyLock {
	return v.value
}

func (v *NullableNodeBodyLock) Set(val *NodeBodyLock) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeBodyLock) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeBodyLock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeBodyLock(val *NodeBodyLock) *NullableNodeBodyLock {
	return &NullableNodeBodyLock{value: val, isSet: true}
}

func (v NullableNodeBodyLock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeBodyLock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


