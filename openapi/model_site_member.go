/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SiteMember type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteMember{}

// SiteMember struct for SiteMember
type SiteMember struct {
	Id string `json:"id"`
	Person Person `json:"person"`
	Role string `json:"role"`
	IsMemberOfGroup *bool `json:"isMemberOfGroup,omitempty"`
}

// NewSiteMember instantiates a new SiteMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteMember(id string, person Person, role string) *SiteMember {
	this := SiteMember{}
	this.Id = id
	this.Person = person
	this.Role = role
	return &this
}

// NewSiteMemberWithDefaults instantiates a new SiteMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteMemberWithDefaults() *SiteMember {
	this := SiteMember{}
	return &this
}

// GetId returns the Id field value
func (o *SiteMember) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SiteMember) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SiteMember) SetId(v string) {
	o.Id = v
}

// GetPerson returns the Person field value
func (o *SiteMember) GetPerson() Person {
	if o == nil {
		var ret Person
		return ret
	}

	return o.Person
}

// GetPersonOk returns a tuple with the Person field value
// and a boolean to check if the value has been set.
func (o *SiteMember) GetPersonOk() (*Person, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Person, true
}

// SetPerson sets field value
func (o *SiteMember) SetPerson(v Person) {
	o.Person = v
}

// GetRole returns the Role field value
func (o *SiteMember) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *SiteMember) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *SiteMember) SetRole(v string) {
	o.Role = v
}

// GetIsMemberOfGroup returns the IsMemberOfGroup field value if set, zero value otherwise.
func (o *SiteMember) GetIsMemberOfGroup() bool {
	if o == nil || IsNil(o.IsMemberOfGroup) {
		var ret bool
		return ret
	}
	return *o.IsMemberOfGroup
}

// GetIsMemberOfGroupOk returns a tuple with the IsMemberOfGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteMember) GetIsMemberOfGroupOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMemberOfGroup) {
		return nil, false
	}
	return o.IsMemberOfGroup, true
}

// HasIsMemberOfGroup returns a boolean if a field has been set.
func (o *SiteMember) HasIsMemberOfGroup() bool {
	if o != nil && !IsNil(o.IsMemberOfGroup) {
		return true
	}

	return false
}

// SetIsMemberOfGroup gets a reference to the given bool and assigns it to the IsMemberOfGroup field.
func (o *SiteMember) SetIsMemberOfGroup(v bool) {
	o.IsMemberOfGroup = &v
}

func (o SiteMember) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteMember) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["person"] = o.Person
	toSerialize["role"] = o.Role
	if !IsNil(o.IsMemberOfGroup) {
		toSerialize["isMemberOfGroup"] = o.IsMemberOfGroup
	}
	return toSerialize, nil
}

type NullableSiteMember struct {
	value *SiteMember
	isSet bool
}

func (v NullableSiteMember) Get() *SiteMember {
	return v.value
}

func (v *NullableSiteMember) Set(val *SiteMember) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteMember) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteMember(val *SiteMember) *NullableSiteMember {
	return &NullableSiteMember{value: val, isSet: true}
}

func (v NullableSiteMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


