/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PermissionElement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionElement{}

// PermissionElement struct for PermissionElement
type PermissionElement struct {
	AuthorityId *string `json:"authorityId,omitempty"`
	Name *string `json:"name,omitempty"`
	AccessStatus *string `json:"accessStatus,omitempty"`
}

// NewPermissionElement instantiates a new PermissionElement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionElement() *PermissionElement {
	this := PermissionElement{}
	var accessStatus string = "ALLOWED"
	this.AccessStatus = &accessStatus
	return &this
}

// NewPermissionElementWithDefaults instantiates a new PermissionElement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionElementWithDefaults() *PermissionElement {
	this := PermissionElement{}
	var accessStatus string = "ALLOWED"
	this.AccessStatus = &accessStatus
	return &this
}

// GetAuthorityId returns the AuthorityId field value if set, zero value otherwise.
func (o *PermissionElement) GetAuthorityId() string {
	if o == nil || IsNil(o.AuthorityId) {
		var ret string
		return ret
	}
	return *o.AuthorityId
}

// GetAuthorityIdOk returns a tuple with the AuthorityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionElement) GetAuthorityIdOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorityId) {
		return nil, false
	}
	return o.AuthorityId, true
}

// HasAuthorityId returns a boolean if a field has been set.
func (o *PermissionElement) HasAuthorityId() bool {
	if o != nil && !IsNil(o.AuthorityId) {
		return true
	}

	return false
}

// SetAuthorityId gets a reference to the given string and assigns it to the AuthorityId field.
func (o *PermissionElement) SetAuthorityId(v string) {
	o.AuthorityId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PermissionElement) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionElement) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PermissionElement) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PermissionElement) SetName(v string) {
	o.Name = &v
}

// GetAccessStatus returns the AccessStatus field value if set, zero value otherwise.
func (o *PermissionElement) GetAccessStatus() string {
	if o == nil || IsNil(o.AccessStatus) {
		var ret string
		return ret
	}
	return *o.AccessStatus
}

// GetAccessStatusOk returns a tuple with the AccessStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionElement) GetAccessStatusOk() (*string, bool) {
	if o == nil || IsNil(o.AccessStatus) {
		return nil, false
	}
	return o.AccessStatus, true
}

// HasAccessStatus returns a boolean if a field has been set.
func (o *PermissionElement) HasAccessStatus() bool {
	if o != nil && !IsNil(o.AccessStatus) {
		return true
	}

	return false
}

// SetAccessStatus gets a reference to the given string and assigns it to the AccessStatus field.
func (o *PermissionElement) SetAccessStatus(v string) {
	o.AccessStatus = &v
}

func (o PermissionElement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionElement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthorityId) {
		toSerialize["authorityId"] = o.AuthorityId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.AccessStatus) {
		toSerialize["accessStatus"] = o.AccessStatus
	}
	return toSerialize, nil
}

type NullablePermissionElement struct {
	value *PermissionElement
	isSet bool
}

func (v NullablePermissionElement) Get() *PermissionElement {
	return v.value
}

func (v *NullablePermissionElement) Set(val *PermissionElement) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionElement) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionElement(val *PermissionElement) *NullablePermissionElement {
	return &NullablePermissionElement{value: val, isSet: true}
}

func (v NullablePermissionElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


