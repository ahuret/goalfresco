/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ChildAssociationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChildAssociationInfo{}

// ChildAssociationInfo struct for ChildAssociationInfo
type ChildAssociationInfo struct {
	AssocType string `json:"assocType"`
	IsPrimary bool `json:"isPrimary"`
}

// NewChildAssociationInfo instantiates a new ChildAssociationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChildAssociationInfo(assocType string, isPrimary bool) *ChildAssociationInfo {
	this := ChildAssociationInfo{}
	this.AssocType = assocType
	this.IsPrimary = isPrimary
	return &this
}

// NewChildAssociationInfoWithDefaults instantiates a new ChildAssociationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChildAssociationInfoWithDefaults() *ChildAssociationInfo {
	this := ChildAssociationInfo{}
	return &this
}

// GetAssocType returns the AssocType field value
func (o *ChildAssociationInfo) GetAssocType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssocType
}

// GetAssocTypeOk returns a tuple with the AssocType field value
// and a boolean to check if the value has been set.
func (o *ChildAssociationInfo) GetAssocTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssocType, true
}

// SetAssocType sets field value
func (o *ChildAssociationInfo) SetAssocType(v string) {
	o.AssocType = v
}

// GetIsPrimary returns the IsPrimary field value
func (o *ChildAssociationInfo) GetIsPrimary() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPrimary
}

// GetIsPrimaryOk returns a tuple with the IsPrimary field value
// and a boolean to check if the value has been set.
func (o *ChildAssociationInfo) GetIsPrimaryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPrimary, true
}

// SetIsPrimary sets field value
func (o *ChildAssociationInfo) SetIsPrimary(v bool) {
	o.IsPrimary = v
}

func (o ChildAssociationInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChildAssociationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assocType"] = o.AssocType
	toSerialize["isPrimary"] = o.IsPrimary
	return toSerialize, nil
}

type NullableChildAssociationInfo struct {
	value *ChildAssociationInfo
	isSet bool
}

func (v NullableChildAssociationInfo) Get() *ChildAssociationInfo {
	return v.value
}

func (v *NullableChildAssociationInfo) Set(val *ChildAssociationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableChildAssociationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableChildAssociationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChildAssociationInfo(val *ChildAssociationInfo) *NullableChildAssociationInfo {
	return &NullableChildAssociationInfo{value: val, isSet: true}
}

func (v NullableChildAssociationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChildAssociationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


