/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NodeBodyCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeBodyCreate{}

// NodeBodyCreate struct for NodeBodyCreate
type NodeBodyCreate struct {
	// The name must not contain spaces or the following special characters: * \" < > \\ / ? : and |. The character . must not be used at the end of the name. 
	Name string `json:"name"`
	NodeType string `json:"nodeType"`
	AspectNames []string `json:"aspectNames,omitempty"`
	Properties map[string]interface{} `json:"properties,omitempty"`
	Permissions *PermissionsBody `json:"permissions,omitempty"`
	Definition *Definition `json:"definition,omitempty"`
	RelativePath *string `json:"relativePath,omitempty"`
	Association *NodeBodyCreateAssociation `json:"association,omitempty"`
	SecondaryChildren []ChildAssociationBody `json:"secondaryChildren,omitempty"`
	Targets []AssociationBody `json:"targets,omitempty"`
}

// NewNodeBodyCreate instantiates a new NodeBodyCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeBodyCreate(name string, nodeType string) *NodeBodyCreate {
	this := NodeBodyCreate{}
	this.Name = name
	this.NodeType = nodeType
	return &this
}

// NewNodeBodyCreateWithDefaults instantiates a new NodeBodyCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeBodyCreateWithDefaults() *NodeBodyCreate {
	this := NodeBodyCreate{}
	return &this
}

// GetName returns the Name field value
func (o *NodeBodyCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NodeBodyCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NodeBodyCreate) SetName(v string) {
	o.Name = v
}

// GetNodeType returns the NodeType field value
func (o *NodeBodyCreate) GetNodeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeType
}

// GetNodeTypeOk returns a tuple with the NodeType field value
// and a boolean to check if the value has been set.
func (o *NodeBodyCreate) GetNodeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeType, true
}

// SetNodeType sets field value
func (o *NodeBodyCreate) SetNodeType(v string) {
	o.NodeType = v
}

// GetAspectNames returns the AspectNames field value if set, zero value otherwise.
func (o *NodeBodyCreate) GetAspectNames() []string {
	if o == nil || IsNil(o.AspectNames) {
		var ret []string
		return ret
	}
	return o.AspectNames
}

// GetAspectNamesOk returns a tuple with the AspectNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeBodyCreate) GetAspectNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.AspectNames) {
		return nil, false
	}
	return o.AspectNames, true
}

// HasAspectNames returns a boolean if a field has been set.
func (o *NodeBodyCreate) HasAspectNames() bool {
	if o != nil && !IsNil(o.AspectNames) {
		return true
	}

	return false
}

// SetAspectNames gets a reference to the given []string and assigns it to the AspectNames field.
func (o *NodeBodyCreate) SetAspectNames(v []string) {
	o.AspectNames = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *NodeBodyCreate) GetProperties() map[string]interface{} {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeBodyCreate) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *NodeBodyCreate) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]interface{} and assigns it to the Properties field.
func (o *NodeBodyCreate) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *NodeBodyCreate) GetPermissions() PermissionsBody {
	if o == nil || IsNil(o.Permissions) {
		var ret PermissionsBody
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeBodyCreate) GetPermissionsOk() (*PermissionsBody, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *NodeBodyCreate) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given PermissionsBody and assigns it to the Permissions field.
func (o *NodeBodyCreate) SetPermissions(v PermissionsBody) {
	o.Permissions = &v
}

// GetDefinition returns the Definition field value if set, zero value otherwise.
func (o *NodeBodyCreate) GetDefinition() Definition {
	if o == nil || IsNil(o.Definition) {
		var ret Definition
		return ret
	}
	return *o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeBodyCreate) GetDefinitionOk() (*Definition, bool) {
	if o == nil || IsNil(o.Definition) {
		return nil, false
	}
	return o.Definition, true
}

// HasDefinition returns a boolean if a field has been set.
func (o *NodeBodyCreate) HasDefinition() bool {
	if o != nil && !IsNil(o.Definition) {
		return true
	}

	return false
}

// SetDefinition gets a reference to the given Definition and assigns it to the Definition field.
func (o *NodeBodyCreate) SetDefinition(v Definition) {
	o.Definition = &v
}

// GetRelativePath returns the RelativePath field value if set, zero value otherwise.
func (o *NodeBodyCreate) GetRelativePath() string {
	if o == nil || IsNil(o.RelativePath) {
		var ret string
		return ret
	}
	return *o.RelativePath
}

// GetRelativePathOk returns a tuple with the RelativePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeBodyCreate) GetRelativePathOk() (*string, bool) {
	if o == nil || IsNil(o.RelativePath) {
		return nil, false
	}
	return o.RelativePath, true
}

// HasRelativePath returns a boolean if a field has been set.
func (o *NodeBodyCreate) HasRelativePath() bool {
	if o != nil && !IsNil(o.RelativePath) {
		return true
	}

	return false
}

// SetRelativePath gets a reference to the given string and assigns it to the RelativePath field.
func (o *NodeBodyCreate) SetRelativePath(v string) {
	o.RelativePath = &v
}

// GetAssociation returns the Association field value if set, zero value otherwise.
func (o *NodeBodyCreate) GetAssociation() NodeBodyCreateAssociation {
	if o == nil || IsNil(o.Association) {
		var ret NodeBodyCreateAssociation
		return ret
	}
	return *o.Association
}

// GetAssociationOk returns a tuple with the Association field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeBodyCreate) GetAssociationOk() (*NodeBodyCreateAssociation, bool) {
	if o == nil || IsNil(o.Association) {
		return nil, false
	}
	return o.Association, true
}

// HasAssociation returns a boolean if a field has been set.
func (o *NodeBodyCreate) HasAssociation() bool {
	if o != nil && !IsNil(o.Association) {
		return true
	}

	return false
}

// SetAssociation gets a reference to the given NodeBodyCreateAssociation and assigns it to the Association field.
func (o *NodeBodyCreate) SetAssociation(v NodeBodyCreateAssociation) {
	o.Association = &v
}

// GetSecondaryChildren returns the SecondaryChildren field value if set, zero value otherwise.
func (o *NodeBodyCreate) GetSecondaryChildren() []ChildAssociationBody {
	if o == nil || IsNil(o.SecondaryChildren) {
		var ret []ChildAssociationBody
		return ret
	}
	return o.SecondaryChildren
}

// GetSecondaryChildrenOk returns a tuple with the SecondaryChildren field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeBodyCreate) GetSecondaryChildrenOk() ([]ChildAssociationBody, bool) {
	if o == nil || IsNil(o.SecondaryChildren) {
		return nil, false
	}
	return o.SecondaryChildren, true
}

// HasSecondaryChildren returns a boolean if a field has been set.
func (o *NodeBodyCreate) HasSecondaryChildren() bool {
	if o != nil && !IsNil(o.SecondaryChildren) {
		return true
	}

	return false
}

// SetSecondaryChildren gets a reference to the given []ChildAssociationBody and assigns it to the SecondaryChildren field.
func (o *NodeBodyCreate) SetSecondaryChildren(v []ChildAssociationBody) {
	o.SecondaryChildren = v
}

// GetTargets returns the Targets field value if set, zero value otherwise.
func (o *NodeBodyCreate) GetTargets() []AssociationBody {
	if o == nil || IsNil(o.Targets) {
		var ret []AssociationBody
		return ret
	}
	return o.Targets
}

// GetTargetsOk returns a tuple with the Targets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeBodyCreate) GetTargetsOk() ([]AssociationBody, bool) {
	if o == nil || IsNil(o.Targets) {
		return nil, false
	}
	return o.Targets, true
}

// HasTargets returns a boolean if a field has been set.
func (o *NodeBodyCreate) HasTargets() bool {
	if o != nil && !IsNil(o.Targets) {
		return true
	}

	return false
}

// SetTargets gets a reference to the given []AssociationBody and assigns it to the Targets field.
func (o *NodeBodyCreate) SetTargets(v []AssociationBody) {
	o.Targets = v
}

func (o NodeBodyCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeBodyCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["nodeType"] = o.NodeType
	if !IsNil(o.AspectNames) {
		toSerialize["aspectNames"] = o.AspectNames
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.Definition) {
		toSerialize["definition"] = o.Definition
	}
	if !IsNil(o.RelativePath) {
		toSerialize["relativePath"] = o.RelativePath
	}
	if !IsNil(o.Association) {
		toSerialize["association"] = o.Association
	}
	if !IsNil(o.SecondaryChildren) {
		toSerialize["secondaryChildren"] = o.SecondaryChildren
	}
	if !IsNil(o.Targets) {
		toSerialize["targets"] = o.Targets
	}
	return toSerialize, nil
}

type NullableNodeBodyCreate struct {
	value *NodeBodyCreate
	isSet bool
}

func (v NullableNodeBodyCreate) Get() *NodeBodyCreate {
	return v.value
}

func (v *NullableNodeBodyCreate) Set(val *NodeBodyCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeBodyCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeBodyCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeBodyCreate(val *NodeBodyCreate) *NullableNodeBodyCreate {
	return &NullableNodeBodyCreate{value: val, isSet: true}
}

func (v NullableNodeBodyCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeBodyCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


