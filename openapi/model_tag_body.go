/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TagBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagBody{}

// TagBody struct for TagBody
type TagBody struct {
	Tag string `json:"tag"`
}

// NewTagBody instantiates a new TagBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagBody(tag string) *TagBody {
	this := TagBody{}
	this.Tag = tag
	return &this
}

// NewTagBodyWithDefaults instantiates a new TagBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagBodyWithDefaults() *TagBody {
	this := TagBody{}
	return &this
}

// GetTag returns the Tag field value
func (o *TagBody) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *TagBody) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *TagBody) SetTag(v string) {
	o.Tag = v
}

func (o TagBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tag"] = o.Tag
	return toSerialize, nil
}

type NullableTagBody struct {
	value *TagBody
	isSet bool
}

func (v NullableTagBody) Get() *TagBody {
	return v.value
}

func (v *NullableTagBody) Set(val *TagBody) {
	v.value = val
	v.isSet = true
}

func (v NullableTagBody) IsSet() bool {
	return v.isSet
}

func (v *NullableTagBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagBody(val *TagBody) *NullableTagBody {
	return &NullableTagBody{value: val, isSet: true}
}

func (v NullableTagBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


