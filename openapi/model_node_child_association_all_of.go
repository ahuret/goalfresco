/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NodeChildAssociationAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeChildAssociationAllOf{}

// NodeChildAssociationAllOf struct for NodeChildAssociationAllOf
type NodeChildAssociationAllOf struct {
	Association *ChildAssociationInfo `json:"association,omitempty"`
}

// NewNodeChildAssociationAllOf instantiates a new NodeChildAssociationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeChildAssociationAllOf() *NodeChildAssociationAllOf {
	this := NodeChildAssociationAllOf{}
	return &this
}

// NewNodeChildAssociationAllOfWithDefaults instantiates a new NodeChildAssociationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeChildAssociationAllOfWithDefaults() *NodeChildAssociationAllOf {
	this := NodeChildAssociationAllOf{}
	return &this
}

// GetAssociation returns the Association field value if set, zero value otherwise.
func (o *NodeChildAssociationAllOf) GetAssociation() ChildAssociationInfo {
	if o == nil || IsNil(o.Association) {
		var ret ChildAssociationInfo
		return ret
	}
	return *o.Association
}

// GetAssociationOk returns a tuple with the Association field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeChildAssociationAllOf) GetAssociationOk() (*ChildAssociationInfo, bool) {
	if o == nil || IsNil(o.Association) {
		return nil, false
	}
	return o.Association, true
}

// HasAssociation returns a boolean if a field has been set.
func (o *NodeChildAssociationAllOf) HasAssociation() bool {
	if o != nil && !IsNil(o.Association) {
		return true
	}

	return false
}

// SetAssociation gets a reference to the given ChildAssociationInfo and assigns it to the Association field.
func (o *NodeChildAssociationAllOf) SetAssociation(v ChildAssociationInfo) {
	o.Association = &v
}

func (o NodeChildAssociationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeChildAssociationAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Association) {
		toSerialize["association"] = o.Association
	}
	return toSerialize, nil
}

type NullableNodeChildAssociationAllOf struct {
	value *NodeChildAssociationAllOf
	isSet bool
}

func (v NullableNodeChildAssociationAllOf) Get() *NodeChildAssociationAllOf {
	return v.value
}

func (v *NullableNodeChildAssociationAllOf) Set(val *NodeChildAssociationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeChildAssociationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeChildAssociationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeChildAssociationAllOf(val *NodeChildAssociationAllOf) *NullableNodeChildAssociationAllOf {
	return &NullableNodeChildAssociationAllOf{value: val, isSet: true}
}

func (v NullableNodeChildAssociationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeChildAssociationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


