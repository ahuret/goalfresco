/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VersionEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionEntry{}

// VersionEntry struct for VersionEntry
type VersionEntry struct {
	Entry *Version `json:"entry,omitempty"`
}

// NewVersionEntry instantiates a new VersionEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionEntry() *VersionEntry {
	this := VersionEntry{}
	return &this
}

// NewVersionEntryWithDefaults instantiates a new VersionEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionEntryWithDefaults() *VersionEntry {
	this := VersionEntry{}
	return &this
}

// GetEntry returns the Entry field value if set, zero value otherwise.
func (o *VersionEntry) GetEntry() Version {
	if o == nil || IsNil(o.Entry) {
		var ret Version
		return ret
	}
	return *o.Entry
}

// GetEntryOk returns a tuple with the Entry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionEntry) GetEntryOk() (*Version, bool) {
	if o == nil || IsNil(o.Entry) {
		return nil, false
	}
	return o.Entry, true
}

// HasEntry returns a boolean if a field has been set.
func (o *VersionEntry) HasEntry() bool {
	if o != nil && !IsNil(o.Entry) {
		return true
	}

	return false
}

// SetEntry gets a reference to the given Version and assigns it to the Entry field.
func (o *VersionEntry) SetEntry(v Version) {
	o.Entry = &v
}

func (o VersionEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Entry) {
		toSerialize["entry"] = o.Entry
	}
	return toSerialize, nil
}

type NullableVersionEntry struct {
	value *VersionEntry
	isSet bool
}

func (v NullableVersionEntry) Get() *VersionEntry {
	return v.value
}

func (v *NullableVersionEntry) Set(val *VersionEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionEntry(val *VersionEntry) *NullableVersionEntry {
	return &NullableVersionEntry{value: val, isSet: true}
}

func (v NullableVersionEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


