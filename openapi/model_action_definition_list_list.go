/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ActionDefinitionListList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionDefinitionListList{}

// ActionDefinitionListList struct for ActionDefinitionListList
type ActionDefinitionListList struct {
	Pagination *Pagination `json:"pagination,omitempty"`
	Entries []ActionDefinition `json:"entries,omitempty"`
}

// NewActionDefinitionListList instantiates a new ActionDefinitionListList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionDefinitionListList() *ActionDefinitionListList {
	this := ActionDefinitionListList{}
	return &this
}

// NewActionDefinitionListListWithDefaults instantiates a new ActionDefinitionListList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionDefinitionListListWithDefaults() *ActionDefinitionListList {
	this := ActionDefinitionListList{}
	return &this
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *ActionDefinitionListList) GetPagination() Pagination {
	if o == nil || IsNil(o.Pagination) {
		var ret Pagination
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionDefinitionListList) GetPaginationOk() (*Pagination, bool) {
	if o == nil || IsNil(o.Pagination) {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *ActionDefinitionListList) HasPagination() bool {
	if o != nil && !IsNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given Pagination and assigns it to the Pagination field.
func (o *ActionDefinitionListList) SetPagination(v Pagination) {
	o.Pagination = &v
}

// GetEntries returns the Entries field value if set, zero value otherwise.
func (o *ActionDefinitionListList) GetEntries() []ActionDefinition {
	if o == nil || IsNil(o.Entries) {
		var ret []ActionDefinition
		return ret
	}
	return o.Entries
}

// GetEntriesOk returns a tuple with the Entries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionDefinitionListList) GetEntriesOk() ([]ActionDefinition, bool) {
	if o == nil || IsNil(o.Entries) {
		return nil, false
	}
	return o.Entries, true
}

// HasEntries returns a boolean if a field has been set.
func (o *ActionDefinitionListList) HasEntries() bool {
	if o != nil && !IsNil(o.Entries) {
		return true
	}

	return false
}

// SetEntries gets a reference to the given []ActionDefinition and assigns it to the Entries field.
func (o *ActionDefinitionListList) SetEntries(v []ActionDefinition) {
	o.Entries = v
}

func (o ActionDefinitionListList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionDefinitionListList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}
	if !IsNil(o.Entries) {
		toSerialize["entries"] = o.Entries
	}
	return toSerialize, nil
}

type NullableActionDefinitionListList struct {
	value *ActionDefinitionListList
	isSet bool
}

func (v NullableActionDefinitionListList) Get() *ActionDefinitionListList {
	return v.value
}

func (v *NullableActionDefinitionListList) Set(val *ActionDefinitionListList) {
	v.value = val
	v.isSet = true
}

func (v NullableActionDefinitionListList) IsSet() bool {
	return v.isSet
}

func (v *NullableActionDefinitionListList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionDefinitionListList(val *ActionDefinitionListList) *NullableActionDefinitionListList {
	return &NullableActionDefinitionListList{value: val, isSet: true}
}

func (v NullableActionDefinitionListList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionDefinitionListList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


