/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PasswordResetBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PasswordResetBody{}

// PasswordResetBody struct for PasswordResetBody
type PasswordResetBody struct {
	// the new password
	Password string `json:"password"`
	// the workflow id provided in the reset password email
	Id string `json:"id"`
	// the workflow key provided in the reset password email
	Key string `json:"key"`
}

// NewPasswordResetBody instantiates a new PasswordResetBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPasswordResetBody(password string, id string, key string) *PasswordResetBody {
	this := PasswordResetBody{}
	this.Password = password
	this.Id = id
	this.Key = key
	return &this
}

// NewPasswordResetBodyWithDefaults instantiates a new PasswordResetBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPasswordResetBodyWithDefaults() *PasswordResetBody {
	this := PasswordResetBody{}
	return &this
}

// GetPassword returns the Password field value
func (o *PasswordResetBody) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *PasswordResetBody) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *PasswordResetBody) SetPassword(v string) {
	o.Password = v
}

// GetId returns the Id field value
func (o *PasswordResetBody) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PasswordResetBody) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PasswordResetBody) SetId(v string) {
	o.Id = v
}

// GetKey returns the Key field value
func (o *PasswordResetBody) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *PasswordResetBody) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *PasswordResetBody) SetKey(v string) {
	o.Key = v
}

func (o PasswordResetBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PasswordResetBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["password"] = o.Password
	toSerialize["id"] = o.Id
	toSerialize["key"] = o.Key
	return toSerialize, nil
}

type NullablePasswordResetBody struct {
	value *PasswordResetBody
	isSet bool
}

func (v NullablePasswordResetBody) Get() *PasswordResetBody {
	return v.value
}

func (v *NullablePasswordResetBody) Set(val *PasswordResetBody) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordResetBody) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordResetBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordResetBody(val *PasswordResetBody) *NullablePasswordResetBody {
	return &NullablePasswordResetBody{value: val, isSet: true}
}

func (v NullablePasswordResetBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordResetBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


