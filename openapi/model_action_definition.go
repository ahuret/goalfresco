/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ActionDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionDefinition{}

// ActionDefinition struct for ActionDefinition
type ActionDefinition struct {
	// Identifier of the action definition â€” used for example when executing an action
	Id string `json:"id"`
	// name of the action definition, e.g. \"move\"
	Name *string `json:"name,omitempty"`
	// title of the action definition, e.g. \"Move\"
	Title *string `json:"title,omitempty"`
	// describes the action definition, e.g. \"This will move the matched item to another space.\"
	Description *string `json:"description,omitempty"`
	// QNames of the types this action applies to
	ApplicableTypes []string `json:"applicableTypes"`
	// whether the basic action definition supports action tracking or not
	TrackStatus bool `json:"trackStatus"`
	ParameterDefinitions []ActionParameterDefinition `json:"parameterDefinitions,omitempty"`
}

// NewActionDefinition instantiates a new ActionDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionDefinition(id string, applicableTypes []string, trackStatus bool) *ActionDefinition {
	this := ActionDefinition{}
	this.Id = id
	this.ApplicableTypes = applicableTypes
	this.TrackStatus = trackStatus
	return &this
}

// NewActionDefinitionWithDefaults instantiates a new ActionDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionDefinitionWithDefaults() *ActionDefinition {
	this := ActionDefinition{}
	return &this
}

// GetId returns the Id field value
func (o *ActionDefinition) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ActionDefinition) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ActionDefinition) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ActionDefinition) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionDefinition) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ActionDefinition) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ActionDefinition) SetName(v string) {
	o.Name = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ActionDefinition) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionDefinition) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ActionDefinition) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ActionDefinition) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ActionDefinition) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionDefinition) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ActionDefinition) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ActionDefinition) SetDescription(v string) {
	o.Description = &v
}

// GetApplicableTypes returns the ApplicableTypes field value
func (o *ActionDefinition) GetApplicableTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ApplicableTypes
}

// GetApplicableTypesOk returns a tuple with the ApplicableTypes field value
// and a boolean to check if the value has been set.
func (o *ActionDefinition) GetApplicableTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApplicableTypes, true
}

// SetApplicableTypes sets field value
func (o *ActionDefinition) SetApplicableTypes(v []string) {
	o.ApplicableTypes = v
}

// GetTrackStatus returns the TrackStatus field value
func (o *ActionDefinition) GetTrackStatus() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.TrackStatus
}

// GetTrackStatusOk returns a tuple with the TrackStatus field value
// and a boolean to check if the value has been set.
func (o *ActionDefinition) GetTrackStatusOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrackStatus, true
}

// SetTrackStatus sets field value
func (o *ActionDefinition) SetTrackStatus(v bool) {
	o.TrackStatus = v
}

// GetParameterDefinitions returns the ParameterDefinitions field value if set, zero value otherwise.
func (o *ActionDefinition) GetParameterDefinitions() []ActionParameterDefinition {
	if o == nil || IsNil(o.ParameterDefinitions) {
		var ret []ActionParameterDefinition
		return ret
	}
	return o.ParameterDefinitions
}

// GetParameterDefinitionsOk returns a tuple with the ParameterDefinitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionDefinition) GetParameterDefinitionsOk() ([]ActionParameterDefinition, bool) {
	if o == nil || IsNil(o.ParameterDefinitions) {
		return nil, false
	}
	return o.ParameterDefinitions, true
}

// HasParameterDefinitions returns a boolean if a field has been set.
func (o *ActionDefinition) HasParameterDefinitions() bool {
	if o != nil && !IsNil(o.ParameterDefinitions) {
		return true
	}

	return false
}

// SetParameterDefinitions gets a reference to the given []ActionParameterDefinition and assigns it to the ParameterDefinitions field.
func (o *ActionDefinition) SetParameterDefinitions(v []ActionParameterDefinition) {
	o.ParameterDefinitions = v
}

func (o ActionDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["applicableTypes"] = o.ApplicableTypes
	toSerialize["trackStatus"] = o.TrackStatus
	if !IsNil(o.ParameterDefinitions) {
		toSerialize["parameterDefinitions"] = o.ParameterDefinitions
	}
	return toSerialize, nil
}

type NullableActionDefinition struct {
	value *ActionDefinition
	isSet bool
}

func (v NullableActionDefinition) Get() *ActionDefinition {
	return v.value
}

func (v *NullableActionDefinition) Set(val *ActionDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableActionDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableActionDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionDefinition(val *ActionDefinition) *NullableActionDefinition {
	return &NullableActionDefinition{value: val, isSet: true}
}

func (v NullableActionDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


