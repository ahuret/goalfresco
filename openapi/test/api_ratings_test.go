/*
Alfresco Content Services REST API

Testing RatingsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/ahuret/goalfresco/openapi"
)

func Test_openapi_RatingsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RatingsApiService CreateRating", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		resp, httpRes, err := apiClient.RatingsApi.CreateRating(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatingsApiService DeleteRating", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string
		var ratingId string

		httpRes, err := apiClient.RatingsApi.DeleteRating(context.Background(), nodeId, ratingId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatingsApiService GetRating", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string
		var ratingId string

		resp, httpRes, err := apiClient.RatingsApi.GetRating(context.Background(), nodeId, ratingId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatingsApiService ListRatings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		resp, httpRes, err := apiClient.RatingsApi.ListRatings(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
