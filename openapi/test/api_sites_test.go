/*
Alfresco Content Services REST API

Testing SitesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/ahuret/goalfresco/openapi"
)

func Test_openapi_SitesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SitesApiService ApproveSiteMembershipRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var inviteeId string

		httpRes, err := apiClient.SitesApi.ApproveSiteMembershipRequest(context.Background(), siteId, inviteeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService CreateSite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SitesApi.CreateSite(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService CreateSiteGroupMembership", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesApi.CreateSiteGroupMembership(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService CreateSiteMembership", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesApi.CreateSiteMembership(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService CreateSiteMembershipRequestForPerson", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var personId string

		resp, httpRes, err := apiClient.SitesApi.CreateSiteMembershipRequestForPerson(context.Background(), personId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService DeleteSite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		httpRes, err := apiClient.SitesApi.DeleteSite(context.Background(), siteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService DeleteSiteGroupMembership", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var groupId string

		httpRes, err := apiClient.SitesApi.DeleteSiteGroupMembership(context.Background(), siteId, groupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService DeleteSiteMembership", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var personId string

		httpRes, err := apiClient.SitesApi.DeleteSiteMembership(context.Background(), siteId, personId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService DeleteSiteMembershipForPerson", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var personId string
		var siteId string

		httpRes, err := apiClient.SitesApi.DeleteSiteMembershipForPerson(context.Background(), personId, siteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService DeleteSiteMembershipRequestForPerson", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var personId string
		var siteId string

		httpRes, err := apiClient.SitesApi.DeleteSiteMembershipRequestForPerson(context.Background(), personId, siteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService GetSite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesApi.GetSite(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService GetSiteContainer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var containerId string

		resp, httpRes, err := apiClient.SitesApi.GetSiteContainer(context.Background(), siteId, containerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService GetSiteGroupMembership", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var groupId string

		resp, httpRes, err := apiClient.SitesApi.GetSiteGroupMembership(context.Background(), siteId, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService GetSiteMembership", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var personId string

		resp, httpRes, err := apiClient.SitesApi.GetSiteMembership(context.Background(), siteId, personId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService GetSiteMembershipForPerson", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var personId string
		var siteId string

		resp, httpRes, err := apiClient.SitesApi.GetSiteMembershipForPerson(context.Background(), personId, siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService GetSiteMembershipRequestForPerson", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var personId string
		var siteId string

		resp, httpRes, err := apiClient.SitesApi.GetSiteMembershipRequestForPerson(context.Background(), personId, siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService GetSiteMembershipRequests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SitesApi.GetSiteMembershipRequests(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService ListSiteContainers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesApi.ListSiteContainers(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService ListSiteGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesApi.ListSiteGroups(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService ListSiteMembershipRequestsForPerson", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var personId string

		resp, httpRes, err := apiClient.SitesApi.ListSiteMembershipRequestsForPerson(context.Background(), personId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService ListSiteMemberships", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesApi.ListSiteMemberships(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService ListSiteMembershipsForPerson", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var personId string

		resp, httpRes, err := apiClient.SitesApi.ListSiteMembershipsForPerson(context.Background(), personId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService ListSites", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SitesApi.ListSites(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService RejectSiteMembershipRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var inviteeId string

		httpRes, err := apiClient.SitesApi.RejectSiteMembershipRequest(context.Background(), siteId, inviteeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService UpdateSite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string

		resp, httpRes, err := apiClient.SitesApi.UpdateSite(context.Background(), siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService UpdateSiteGroupMembership", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var groupId string

		resp, httpRes, err := apiClient.SitesApi.UpdateSiteGroupMembership(context.Background(), siteId, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService UpdateSiteMembership", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteId string
		var personId string

		resp, httpRes, err := apiClient.SitesApi.UpdateSiteMembership(context.Background(), siteId, personId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SitesApiService UpdateSiteMembershipRequestForPerson", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var personId string
		var siteId string

		resp, httpRes, err := apiClient.SitesApi.UpdateSiteMembershipRequestForPerson(context.Background(), personId, siteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
