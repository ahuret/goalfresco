/*
Alfresco Content Services REST API

Testing TrashcanApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/ahuret/goalfresco/openapi"
)

func Test_openapi_TrashcanApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TrashcanApiService DeleteDeletedNode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		httpRes, err := apiClient.TrashcanApi.DeleteDeletedNode(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrashcanApiService GetArchivedNodeRendition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string
		var renditionId string

		resp, httpRes, err := apiClient.TrashcanApi.GetArchivedNodeRendition(context.Background(), nodeId, renditionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrashcanApiService GetArchivedNodeRenditionContent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string
		var renditionId string

		resp, httpRes, err := apiClient.TrashcanApi.GetArchivedNodeRenditionContent(context.Background(), nodeId, renditionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrashcanApiService GetDeletedNode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		resp, httpRes, err := apiClient.TrashcanApi.GetDeletedNode(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrashcanApiService GetDeletedNodeContent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		resp, httpRes, err := apiClient.TrashcanApi.GetDeletedNodeContent(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrashcanApiService ListDeletedNodeRenditions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		resp, httpRes, err := apiClient.TrashcanApi.ListDeletedNodeRenditions(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrashcanApiService ListDeletedNodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TrashcanApi.ListDeletedNodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TrashcanApiService RestoreDeletedNode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		resp, httpRes, err := apiClient.TrashcanApi.RestoreDeletedNode(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
