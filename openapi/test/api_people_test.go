/*
Alfresco Content Services REST API

Testing PeopleApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/ahuret/goalfresco/openapi"
)

func Test_openapi_PeopleApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PeopleApiService CreatePerson", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PeopleApi.CreatePerson(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PeopleApiService DeleteAvatarImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var personId string

		httpRes, err := apiClient.PeopleApi.DeleteAvatarImage(context.Background(), personId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PeopleApiService GetAvatarImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var personId string

		resp, httpRes, err := apiClient.PeopleApi.GetAvatarImage(context.Background(), personId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PeopleApiService GetPerson", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var personId string

		resp, httpRes, err := apiClient.PeopleApi.GetPerson(context.Background(), personId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PeopleApiService ListPeople", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PeopleApi.ListPeople(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PeopleApiService RequestPasswordReset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var personId string

		httpRes, err := apiClient.PeopleApi.RequestPasswordReset(context.Background(), personId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PeopleApiService ResetPassword", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var personId string

		httpRes, err := apiClient.PeopleApi.ResetPassword(context.Background(), personId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PeopleApiService UpdateAvatarImage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var personId string

		httpRes, err := apiClient.PeopleApi.UpdateAvatarImage(context.Background(), personId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PeopleApiService UpdatePerson", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var personId string

		resp, httpRes, err := apiClient.PeopleApi.UpdatePerson(context.Background(), personId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
