/*
Alfresco Content Services REST API

**Core API**  Provides access to the core features of Alfresco Content Services. 

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GroupPaging type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupPaging{}

// GroupPaging struct for GroupPaging
type GroupPaging struct {
	List *GroupPagingList `json:"list,omitempty"`
}

// NewGroupPaging instantiates a new GroupPaging object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupPaging() *GroupPaging {
	this := GroupPaging{}
	return &this
}

// NewGroupPagingWithDefaults instantiates a new GroupPaging object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupPagingWithDefaults() *GroupPaging {
	this := GroupPaging{}
	return &this
}

// GetList returns the List field value if set, zero value otherwise.
func (o *GroupPaging) GetList() GroupPagingList {
	if o == nil || IsNil(o.List) {
		var ret GroupPagingList
		return ret
	}
	return *o.List
}

// GetListOk returns a tuple with the List field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupPaging) GetListOk() (*GroupPagingList, bool) {
	if o == nil || IsNil(o.List) {
		return nil, false
	}
	return o.List, true
}

// HasList returns a boolean if a field has been set.
func (o *GroupPaging) HasList() bool {
	if o != nil && !IsNil(o.List) {
		return true
	}

	return false
}

// SetList gets a reference to the given GroupPagingList and assigns it to the List field.
func (o *GroupPaging) SetList(v GroupPagingList) {
	o.List = &v
}

func (o GroupPaging) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupPaging) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.List) {
		toSerialize["list"] = o.List
	}
	return toSerialize, nil
}

type NullableGroupPaging struct {
	value *GroupPaging
	isSet bool
}

func (v NullableGroupPaging) Get() *GroupPaging {
	return v.value
}

func (v *NullableGroupPaging) Set(val *GroupPaging) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupPaging) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupPaging) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupPaging(val *GroupPaging) *NullableGroupPaging {
	return &NullableGroupPaging{value: val, isSet: true}
}

func (v NullableGroupPaging) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupPaging) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


